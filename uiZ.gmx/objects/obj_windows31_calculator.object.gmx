<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window=0;
display=0;
button_C=0;
button_CE=0;
button_back=0;
display_M=0;
frame_grid_buttons=0;
grid_buttons=0;
action=""
numberone=""
setaction=false;
hasmem=false;
mem=""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check for pressed buttons:
if instance_exists(grid_buttons) and instance_exists(display) then {
    //control top buttons.
    if instance_exists(button_C) and button_C.updated = true then {
        uiz_text_settext(display, "")
        uiz_text_recalculate(display)
        numberone = "";
    }
    if instance_exists(button_CE) and button_CE.updated = true then {
        uiz_text_settext(display, "")
        uiz_text_recalculate(display)
    }
    if instance_exists(button_back) and button_back.updated = true then {
        uiz_text_settext(display, string_copy(display.text, 1, string_length(display.text) - 1))
        uiz_text_recalculate(display)
    }

    var mx = uiz_grid_cellsw(grid_buttons);
    var my = uiz_grid_cellsh(grid_buttons);
    for (var _x = 0; _x &lt; mx; _x++) {
        for (var _y = 0; _y &lt; my; _y++) {
            var o = uiz_gridObject(grid_buttons, _x, _y)
            if instance_exists(o) and o.updated = true then {
                switch (_x) {
                    case 0:
                        //M functions
                        switch (_y) {
                            case 0:
                                //MC
                                hasmem = false
                                mem = ""
                                uiz_text_settext(display_M, "")
                                uiz_text_recalculate(display_M)
                                break;
                            case 1:
                                //MR
                                if hasmem = true then {
                                    uiz_text_settext(display, mem)
                                    uiz_text_recalculate(display)
                                }
                                break;
                            case 2:
                                //MS
                                hasmem = true
                                mem = display.text
                                uiz_text_settext(display_M, "M")
                                uiz_text_recalculate(display_M)
                                break;
                            case 3:
                                //M+
                                if hasmem = true then {
                                    var n = real(mem) + real(display.text);
                                    mem = string_format(n, floor(log10(floor(n))), uiz_realgetdecimalpoints(n, 10));
                                }
                                break;
                        }
                        break;
                    case 1:
                        //Left row of numbers
                        if setaction = true then {
                            display.text = "";
                            setaction = false;
                        }
                        uiz_text_settext(display, display.text + string(max(7 - _y * 3, 0)))
                        uiz_text_recalculate(display)
                        break;
                    case 2:
                        //Middle row of numbers
                        if setaction = true then {
                            uiz_text_settext(display, "")
                            setaction = false;
                        }
                        if _y = my then {
                            //flip bit
                            var r = real(display.text)
                            if r = 0 then {
                                uiz_text_settext(display, "-")
                            } else {
                                uiz_text_settext(display, string(-r))
                            }
                        } else {
                            uiz_text_settext(display, display.text + string(8 - _y * 3))
                        }
                        uiz_text_recalculate(display)
                        break;
                    case 3:
                        //Right row of numbers
                        if setaction = true then {
                            uiz_text_settext(display, "");
                            setaction = false;
                        }
                        if _y = my - 1 then {
                            //add decimal point
                            if uiz_stringfind(display.text, ".") = 0 then {
                                uiz_text_settext(display, display.text + ".")
                            }
                        } else {
                            uiz_text_settext(display, display.text + string(9 - _y * 3));
                        }
                        uiz_text_recalculate(display)
                        break;
                    case 4:
                        setaction = true;
                        action = o.text;
                        numberone = display.text
                        break;
                    case 5:
                        if _y = my - 2 then {
                            var n = 1 / real(display.text);
                            uiz_text_settext(display, string_format(n, floor(log10(floor(n))), uiz_realgetdecimalpoints(n, 10)));
                            uiz_text_recalculate(display)
                        } else {
                            if _y = my - 1 then {
                                //calculate answer
                                var n1 = real(numberone)
                                var n2 = real(display.text)

                                switch (action) {
                                    case "/":
                                        if n2 != 0 then {
                                            uiz_text_settext(display, string(n1 / n2));
                                        } else {
                                            display.text = "ERROR division by 0"
                                        }
                                        break;
                                    case "*":
                                        uiz_text_settext(display, string(n1 * n2));
                                        break;
                                    case "-":
                                        uiz_text_settext(display, string(n1 - n2));
                                        break;
                                    case "+":
                                        uiz_text_settext(display, string(n1 + n2));
                                        break;
                                    case "sqrt":
                                        uiz_text_settext(display, string(sqrt(n2)));
                                        break;
                                    case "%":
                                        uiz_text_settext(display, string(n1 mod n2));
                                        break;
                                    case "1/x":
                                        uiz_text_settext(display, string(1 / n2));
                                        break;
                                }
                                uiz_text_recalculate(display)
                                numberone = "";
                                action = "";
                                setaction = false;
                            } else {
                                setaction = true;
                                action = o.text;
                                numberone = display.text
                            }
                        }
                        break;
                }


            }
        }
    }

}
if !instance_exists(window) then {
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
