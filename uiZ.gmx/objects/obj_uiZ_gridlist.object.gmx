<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 8
//#objectversion 1.0
uiz_objinit()
mainlist=-1;
sizelist=-1;
maingrid=-1;

uselist=false;

initialized=false;
spritecount=0;

scrollbarwidth=0.15//v//scrollbar width//
scrollbarwidthtype=dp//z//scrollbar width type//
scrollbarw=0;
scrollbarsprite=spr_uiZ_scrollbar_16//p//scrollbar sprite//
scrollbarcolor=c_white//c//scrollbar color//
scrollbarbacktexmode=uiz_texturemode_fill//t//scrollbar background texture mode//
scrollbarAnimation=uiz_smoothstep//a//scrollbar animation//
scrollbarAnimationTime=0.3//v//scrollbar animation time//
scroll=0;
scroll_start=0;
scroll_old=0;
scrolling=false;
scrollspeed=1//v//scroll speed//
enablescroll=true//b//enable scroll//
doscroll=false
scroll_intern=uiz_drawscrollbar_init();

orientation=0//b//orientation
destroylists=true//b//destroy listlist's lists//
barsize=0.2//v//bar size//
barsizetype=dp//z//bar size type//
textmargin=3//v//text pixel margin//
imagescale=0.9//v//image scaling//
snapmouse=-1;
snapmousepos=-1;
snapmousesize=-1;
snapmouseothersize=-1;
//check out selectionmode for more info
updatemode=0;
//updatetopbar=false;

minbarsize=0.2//v//minimum bar segment width//
minbarsizetype=dp//z//minimum bar segment width type//
mousemargin=5//v//mouse bar dividor margin//
//listheight=20;
//listheighttype=px;
listheightmargin=2//v//pixel cell margin//
resiz=1;

drawdivider=true//b//draw divider//
dividercolor=c_black//c//divider color//
enabledivider=true//b//enable divider//
textcolor=c_black//c//text color//
normalcolor=c_white//c//normal color//
normalalpha=1//v//normal alpha//
selectiononcolor=c_ltgray//c//selection color//
selectiononalpha=1//v//selection alpha//
selectionincolor=c_gray//c//selection click color//
selectioninalpha=1//v//selection click alpha//

font=-1//f//font//

selectionmode=2//v//selection mode//
//selectionmode 0: no selection
//selectionmode 1: single cell
//selectionmode 2: single row
//selectionmode 3: single column
keepselection=true//b//keepselection//
selectedx=-1
selectedy=-1
selectedx_old=-1
selectedy_old=-1
clickedx=-1
clickedy=-1
//old coordinates
cur_wat=-1;
cur_nwat=-1;
cur_hat=-1;
cur_nhat=-1;

cur_wat_old=cur_wat;
cur_nwat_old=cur_nwat;
cur_hat_old=cur_hat;
cur_nhat_old=cur_nhat;

updateNextSnap = false;

h=0;
yh=0;
scrolling=false;

hasbackground=false//b//enable main background//
texturescript=uiz_back_square//i//texturescript//

texturescript_over=-1//i//texturescript over//
texturescript_in=-1//i//texturescript in//
texturescript_out=-1//i//texturescript out//

sprite_normal=spr_uiZ_border1//p//sprite normal//
color_normal=c_white//c//color normal//
margin_normal=0//v//margin normal//
sprite_texturemode=uiz_texturemode_fill//t//texturemode normal
border_texturemode=-1//t//texturemode border//

sprite_over=spr_uiZ_border1_over//p//sprite over//
color_over=-1//c//color over//
margin_over=-1//v//margin over//

sprite_in=spr_uiZ_border1_in//p//sprite in//
color_in=-1//c//color in//
margin_in=-1//v//margin in//

sprite_out=spr_uiZ_border1_in//p//sprite out//
color_out=-1//c//color out//
margin_out=-1//v//margin out//

topbar_texturescript=uiz_back_square//i//top texturescript//
topbar_texturescript_over=-1//i//top texturescript over//
topbar_texturescript_in=-1//i//top texturescript in//
topbar_texturescript_out=-1//i//top texturescript out//

topbar_sprite_normal=spr_uiZ_border1//p//top sprite normal//
topbar_color_normal=c_gray//c//top color normal//
topbar_margin_normal=0//v//top margin normal//
topbar_sprite_texturemode=uiz_texturemode_fill//t//top texturemode normal
topbar_border_texturemode=-1//t//top texturemode border//

topbar_sprite_over=spr_uiZ_border1_over//p//top sprite over//
topbar_color_over=-1//c//top color over//
topbar_margin_over=-1//v//top margin over//

topbar_sprite_in=spr_uiZ_border1_in//p//top sprite in//
topbar_color_in=-1//c//top color in//
topbar_margin_in=-1//v//top margin in//

topbar_sprite_out=spr_uiZ_border1_in//p//top sprite out//
topbar_color_out=-1//c//top color out//
topbar_margin_out=-1//v//top margin out//

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_destroydslist(sizelist)
if destroylists=true then{
uiz_destroydslist(mainlist)
if ds_exists(maingrid, ds_type_grid) then{ds_grid_destroy(maingrid)}
}
uiz_endobject()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle scrollbar
//if doscroll=true and (mx&gt;width-scrollbarw or uiz_mouse_isFrozen_on(id)) then{
if live_call() return live_result;
if doscroll=true then{
    uiz_drawscrollbar_vertical_step(rlx-scrollbarw+1,ry,rlx,rly,scroll_intern,scrollheight,true,h*scrollspeed,scrollbarAnimation, scrollbarAnimationTime);

    scroll=uiz_drawscrollbar_getvalue(scroll_intern);
    uiz_gridlist_startfinish();
    
    //check if scroll has changed
    if scroll!=scroll_old then{
        uiz_updater_FixView_NoMove();
        scrolling=true;
        cur_hat  +=(scroll_old-scroll);
        cur_nhat +=(scroll_old-scroll);
        cur_hat_old  +=(scroll_old-scroll);
        cur_nhat_old +=(scroll_old-scroll);
        scroll_old=scroll;
        updateNextSnap=1;
        
    }else{
        scrolling=false;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get current selection:
if live_call() return live_result;
if uiz_drawscrollbar_getselected(scroll_intern)=false /*and uiz_getmouse_x()&lt;rlx-scrollbarw*/ and ds_exists(mainlist, ds_type_list) and ds_exists(sizelist, ds_type_list) then{
    var sz = ds_list_size(mainlist);
    if sz&gt;0 and sz=ds_list_size(sizelist) then{
        var mx = uiz_getmouse_x()-rx;
        var my = uiz_getmouse_y();
        var wat=sizelist[|0];

        
        if snapmouse=-1 then{
            uiz_gridlist_remember();

            if (mx&lt;cur_wat or mx&gt;cur_nwat) then{//check if x mouse is outside current selection
    
                selectedx=-1;
                if mx&gt;0 and mx&lt;width-scrollbarw then{
                    for (var i = 1; i &lt; sz; i++){//loop columns
                        if mx&lt;wat then{
                            selectedx=i-1;
                            cur_wat=wat-sizelist[|i-1];
                            cur_nwat=wat;
                            break;
                        }
                        wat+=sizelist[|i];
                    }
                    
                    if i = sz then{
                        cur_wat=width-scrollbarw-sizelist[|sz-1];
                        cur_nwat=width-scrollbarw;
                        selectedx=sz-1;
                    }
                }else{
                    if keepselection==false then{
                        clickedx=-1;
                        clickedy=-1;
                    }
                }
            }
        }
        if my&lt;yh and global.mousefrozen=false then{
            var switchsel=-1;
            var cm;
            if mx&lt;cur_wat+mousemargin then{
                switchsel=selectedx-1;
                cm=cur_wat
            }
            if mx&gt;cur_nwat-mousemargin then{
                switchsel=selectedx;
                cm=cur_nwat;
            }
            if switchsel&gt;-1 and switchsel&lt;sz then{
                uiz_set_cursor(cr_size_we);
                if kmouseover=uiz_mouseclick then{
                    snapmouse=switchsel;
                    snapmousepos=mx;
                    snapmousesize=sizelist[|switchsel];
                    snapmouseothersize=sizelist[|switchsel+1];
                    
                    selectedx=snapmouse;
                    selectedy = -1;
                    selectedx_old=selectedx+1;
                    cur_wat=cm-snapmousesize
                    
                    if clickedy!=-1 and selectionmode==2 then{
                        uiz_updater_FixViews();
                    }
                    
                    if keepselection==false then{
                        clickedx = -1;
                        clickedy = -1;
                    }
    
                    cur_nwat_old=cm+snapmouseothersize
                    uiz_mouse_freeze();
                }
            }
            else{
                uiz_set_cursor(cr_default);
            }
        }else{
            if my&gt;=yh and global.mousefrozen=false then{
                uiz_set_cursor(cr_default);
            }
        }
        if snapmouse&gt;-1 and snapmouse&lt;sz then{
            var mcha=clamp(mx-snapmousepos,-snapmousesize+h,snapmouseothersize-h);
            var nsz=snapmousesize+mcha;
            var nosz=snapmouseothersize-mcha;
            sizelist[|snapmouse]=nsz;
            sizelist[|snapmouse+1]=nosz;
//            if snapmouse=selectedx then{cur_nwat=cur_wat+nsz;}
//            if snapmouse+1=selectedx then{cur_wat=cur_nwat-nosz;}
            updatemode=4;
            
            if updateNextSnap then{
                updateNextSnap--;
                uiz_updater_FixViews();
            }else{
                if selectionmode=3 then{
                    uiz_updater_FixViews_area_selfmarked(rx+cur_wat,ry,rx+cur_nwat_old-1,rly);
                }else{
                    uiz_updater_FixViews_area(rx+cur_wat,ry,rx+cur_nwat_old-1,rly);
                }
            }
            
            cur_nwat=cur_wat+nsz;
            cur_wat_old=cur_nwat_old-nosz;  
            
            

            if mouse_check_button(mb_left)==false then{
                snapmouse=-1;
                uiz_mouse_unfreeze()
                uiz_set_cursor(cr_default);
                selectedy=-1;exit;
            }
            
        }
        //get selectedy
            if snapmouse=-1 then{
            
            uiz_gridlist_getty(my-yh);

            if (selectedx!=-1 and selectedy!=-1 and ((selectedx_old!=selectedx and (selectionmode!=2)) or (selectedy_old!=selectedy and (selectionmode!=3 or selectedy_old==-1))) and (uiz_selfmarked=false)) then{
                updatemode=selectionmode;
                if kmouseover&gt;=uiz_mouseclick then{
                    clickedx=selectedx;
                    clickedy=selectedy;
                }
                if updateNextSnap then{
                updateNextSnap--;
                uiz_updater_FixViews();
                }else{
                uiz_gridlist_updatecell();
                uiz_gridlist_updateoldcell();
                }
            }else{
                //sdbm("select",selectedx_old,selectedx)
                if (selectedx_old!=selectedx and selectedx=-1) or (selectedy_old!=selectedy and selectedy=-1){
                    //sdbm("deselecting")
                    updatemode=selectionmode;
                    uiz_gridlist_updateoldcell();
                    cur_wat=-1;
                    cur_hat=-1;
                    cur_nwat=-1;
                    cur_nhat=-1;
                    selectedx=-1;
                    selectedy=-1;
                }
            }        
            }
    }
}else{
    
    uiz_gridlist_remember();
    cur_wat=-1;
    cur_hat=-1;
    cur_nwat=-1;
    cur_nhat=-1;
    selectedx=-1;
    selectedy=-1;
    if keepselection==false then{
        clickedx=-1;
        clickedy=-1;
    }
}
//DEBUG
//uiz_updater_FixViews();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if live_call() return live_result;
switch(kmouseover){
case 0:
scrolling=false;
uiz_gridlist_remember();
updatemode=selectionmode;
//sdbm("waddup?",updatemode,selectedx,selectedy,selectedx_old,selectedy_old, width,height,"nwat",cur_nwat_old, cur_nhat_old, cur_wat_old, cur_nwat_old);
uiz_gridlist_updateoldcell();
selectedx=-1;
selectedy=-1;
if keepselection==false then{
    clickedx=-1;
    clickedy=-1;
}
cur_wat=-1;
cur_hat=-1;
cur_nwat=-1;
cur_nhat=-1;
break;
case uiz_mousepressed:
    //if uiz_drawscrollbar_getselected(scroll)=false then{
    
    if snapmouse=-1 and (clickedy!=-1 or updatemode!=3) and selectedx!=-1 and (selectedy!=-1 or selectionmode==3) and uiz_getmouse_y()&gt;yh then{
        //sdbm("setting clicked: ",selectedx,selectedy);
        clickedx=selectedx;
        clickedy=selectedy;
        updatemode=selectionmode;
        if uiz_selfmarked=false then{
        uiz_gridlist_updatecell();}
    }
    
    //}
break;
case uiz_mousereleased:
    //if uiz_drawscrollbar_getselected(scroll)=false then{
    if (clickedx!=-1 or (clickedy!=-1 and updatemode!=3)) and keepselection == false then{
    clickedx=-1;
    clickedy=-1;
    updatemode=selectionmode;
    if uiz_selfmarked=false then{
    uiz_gridlist_updatecell();
    }
    }else{
        if keepselection then{
            uiz_updater_FixViews();
        }
    }
break;
}

if (kmouseover&lt;=uiz_mouseover or kmouseover=uiz_mousereleased) and snapmouse&gt;-1 then{
snapmouse=-1;
uiz_mouse_unfreeze()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if doscroll=true then{
    uiz_mouse_docheck_scrollable()
}else{
    uiz_mouse_docheck()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if live_call() return live_result;
if uiz_cntn() then {
    //draw background
    if hasbackground then{
    uiz_back()
    }
    //check list
    draw_set_halign(fa_left)
    draw_set_valign(fa_center)
    if ds_exists(mainlist, ds_type_list) and ds_exists(sizelist, ds_type_list) and ds_exists(maingrid,ds_type_grid) then{
        uiz_back_captureSettings();
        var sz = ds_list_size(mainlist)
        if uiz_selfmarked=true and scrolling=false then{
        switch(updatemode){
            case 1://single cell
                if cur_wat&gt;-1 and (cur_hat&gt;-1 or cur_nhat&gt;-1) then{
                    if clickedx == selectedx and clickedy ==  selectedy then{
                        uiz_gridlist_drawsquareback_cell(selectionincolor,selectioninalpha);
                    }else{
                        uiz_gridlist_drawsquareback_cell(selectiononcolor,selectiononalpha);
                    }
                        uiz_gridlist_drawcell(selectedx,selectedy,rx+cur_wat,yh+cur_hat,sizelist[|selectedx]);
                }
                if cur_nwat_old&gt;-1 and cur_nhat_old&gt;-1 and (selectedx!=selectedx_old or selectedy!=selectedy_old) then{
                    if clickedy == selectedy_old and clickedx == selectedx_old then{
                        if selectedx_old &lt; ds_list_size(mainlist)-1 then{
                            draw_square(rx+cur_wat_old,yh+cur_hat_old,rx+cur_nwat_old-1,yh+cur_nhat_old,selectionincolor,selectioninalpha*alpha);
                        }else{
                            draw_square(rx+cur_wat_old,yh+cur_hat_old,rx+cur_nwat_old,yh+cur_nhat_old,selectionincolor,selectioninalpha*alpha);
                        }
                    }else{
                        if selectedx_old &lt; ds_list_size(mainlist)-1 then{
                            draw_square(rx+cur_wat_old,yh+cur_hat_old,rx+cur_nwat_old-1,yh+cur_nhat_old,normalcolor,normalalpha*alpha);        
                        }else{
                            draw_square(rx+cur_wat_old,yh+cur_hat_old,rx+cur_nwat_old,yh+cur_nhat_old,normalcolor,normalalpha*alpha);
                        }
                    }
                    uiz_gridlist_drawcell(selectedx_old,selectedy_old,rx+cur_wat_old,yh+cur_hat_old,sizelist[|selectedx_old]);
                }
            break;
            case 2://row
                if (cur_hat&gt;-1 or cur_nhat&gt;-1) then{
                    if clickedy == selectedy then{
                        uiz_gridlist_drawsquareback_row(selectionincolor,selectioninalpha);
                    }else{
                        uiz_gridlist_drawsquareback_row(selectiononcolor,selectiononalpha);
                    }
                    uiz_gridlist_drawrow(selectedy,rx,yh+cur_hat)
                    }
                    //sdbm("seke",selectedy,selectedy_old,selectedx,selectedx_old,uiz_getmouse_x()-rx,cur_wat,cur_nwat,width)
                    if (cur_hat_old&gt;-1 or cur_nhat_old&gt;-1) and selectedy!=selectedy_old and selectedy_old!=-1 then{
                        if clickedy == selectedy_old then{
                            draw_square(rx,yh+cur_hat_old,rlx-scrollbarw,yh+cur_nhat_old,selectionincolor,selectioninalpha*alpha);
                        }else{
                            draw_square(rx,yh+cur_hat_old,rlx-scrollbarw,yh+cur_nhat_old,normalcolor,normalalpha*alpha);        
                        }
                        //draw_square(rx,yh+cur_hat_old,rlx-scrollbarw,yh+cur_nhat_old,uiz_gridlist_randomcolor(50,-1),normalalpha*alpha);        
                        uiz_gridlist_drawrow(selectedy_old,rx,yh+cur_hat_old)
                }
            break;
            case 3:case 4://column
                if(cur_wat&gt;-1 or cur_nwat&gt;-1)then{
                    if updatemode=3 then{
                    if selectedy=-1 then{
                        uiz_gridlist_drawsquareback_col(normalcolor,normalalpha);
                    }else{
                        if clickedx == selectedx and clickedy!=-1 then{
                            uiz_gridlist_drawsquareback_col(selectionincolor,selectioninalpha);
                        }else{
                            uiz_gridlist_drawsquareback_col(selectiononcolor,selectiononalpha);
                        }
                    }
                    uiz_gridlist_drawcolumn(selectedx,rx+cur_wat,yh,cur_nwat-cur_wat);
                    }else if updatemode=4 then{
                        if clickedx == selectedx and clickedy!=-1 then{
                            uiz_gridlist_drawsquareback_col(selectionincolor,selectioninalpha);
                        }else{
                            uiz_gridlist_drawsquareback_col(normalcolor,normalalpha);
                        }
                        //uiz_gridlist_drawsquareback_col(normalcolor,normalalpha);
                        uiz_gridlist_drawcolumn(selectedx,rx+cur_wat,yh,cur_nwat-cur_wat);
                        uiz_gridlist_drawTopbar(rx+cur_wat,rx+cur_nwat,yh,selectedx);                    
                    }
                    
                }
                //if cur_wat&gt;-1 and selectedx&gt;-1 and selectedx&lt;sz then{

//                }
                if (selectedx_old!=selectedx) and (cur_wat_old&gt;-1 or cur_nwat_old&gt;-1) then{
                    if clickedx == selectedx_old and updatemode=3 then{
                        if selectedx_old &lt; ds_list_size(mainlist)-1 then{
                            draw_square(rx+cur_wat_old,yh,rx+cur_nwat_old-1,rly,selectionincolor,selectioninalpha*alpha);
                        }else{
                            draw_square(rx+cur_wat_old,yh,rx+cur_nwat_old,rly,selectionincolor,selectioninalpha*alpha);
                        }
                    }else{
                        if clickedx == selectedx_old and updatemode=4 then{
                            if selectedx_old &lt; ds_list_size(mainlist)-1 then{
                                draw_square(rx+cur_wat_old,yh,rx+cur_nwat_old-1,rly,selectionincolor,selectioninalpha*alpha);
                            }else{
                                draw_square(rx+cur_wat_old,yh,rx+cur_nwat_old,rly,selectionincolor,selectioninalpha*alpha);
                            }
                        }else{
                            if selectedx_old &lt; ds_list_size(mainlist)-1 then{
                                draw_square(rx+cur_wat_old,yh,rx+cur_nwat_old-1,rly,normalcolor,normalalpha*alpha);
                            }else{
                                draw_square(rx+cur_wat_old,yh,rx+cur_nwat_old,rly,normalcolor,normalalpha*alpha);
                            }
                        }
                    }
                    uiz_gridlist_drawcolumn(selectedx_old,rx+cur_wat_old,yh,cur_nwat_old-cur_wat_old);
                    uiz_gridlist_drawTopbar(rx+cur_wat_old,rx+cur_nwat_old,yh,selectedx_old);
                }
            break;
            }
        }else{
            //loop trough list
            
            var wat = rx;//the current x of the current column

            if font &gt; -1 then {
                draw_set_font(font)
            }
            
            uiz_gridlist_drawsquareback_general();
            var nwat, wat;
            for (var i = 0; i &lt; sz; i++) {
                nwat = wat + sizelist[| i];                
                uiz_gridlist_drawcolumn(i,wat,yh,nwat-wat);
                uiz_gridlist_drawTopbar(wat,nwat,yh,i);
                var wat=nwat;//set new first x to old last x.
            }

        }
        
        if doscroll=true then{
            //draw scrollbar
            uiz_drawscrollbar_vertical_draw(rlx-scrollbarw+1,ry,rlx,rly,scrollbarsprite,scrollbarcolor,scrollbarbacktexmode,scroll_intern,scrollheight);
        }
        
        uiz_back_resumeSettings();
        
}
updatemode=0;
uiz_containend();               
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_destroydslist(sizelist)
if destroylists=true then{
uiz_destroydslist(mainlist)
if ds_exists(maingrid, ds_type_grid) then{ds_grid_destroy(maingrid)}
}
uiz_endobject()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_destroydslist(sizelist)
if destroylists=true then{
uiz_destroydslist(mainlist)
if ds_exists(maingrid, ds_type_grid) then{ds_grid_destroy(maingrid)}
}
uiz_endobject()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if live_call() return live_result;
draw_set_color(c_black);
draw_set_alpha(1);
draw_set_valign(fa_top);
draw_text(0,0,"selected: "+string(selectedx)+", "+string(selectedy));
draw_text(0,30,"clicked: "+string(clickedx)+", "+string(clickedy));
draw_text(0,60,"selectionmode: "+string(selectionmode)+", "+string(keepselection));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if live_call() return live_result;
uiz_gridlist_selectionmode(id,3,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
