<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 3
//#objectversion 1.0
//#exclude
uiz_objinit()
//put init variables here
tablist=-1
destroytablist=true//b//destroy ds list when done//
spacinglist=ds_list_create();
font=-1//f//font//
textcolor=c_black//c//text color//
halign=fa_center//v//halign//
valign=fa_center//v//valign//
oldvalue=0;
value=0//v//tabnumber//
linearinter=0
animationtime=0.5//v//animationtime in seconds//
placeanimation=uiz_circular_in//moving animation//
widthanimation=uiz_circular_in//sizing animation//
marksize=0.1//v//marker height//
marksizetype=fc//z//marker height type//
markcolor=c_white//c//marker color//
mouseoncolor=c_ltgray//c//mouse over color//
mouseincolor=c_white//c//mouse click color//
mouseonalpha=0.2//v//mouse over alpha//
mouseinalpha=0.2//v//mouse click alpha//

newwidth=0;
newpos=0;
placevalue=0;
widthvalue=0;
//lastgowhat=0;
//gowhat=0;
forceinanimation=false
//doanimation=false
//getlist=true;
update=false;
updated=false;
lastMouseItem=-1;
lastMouseV = 0;
lastMouseoV = 0;
mouseItem=-1;
mouseV = 0;
mouseOv = 0;
oldTabPos=0;
oldTabWidth=0;
newTabPos=0;
newTabWidth=0;
tabY=0;
updateBar=false;
oldwidth=width;
oldx=0;
oldsz=0;
goback=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if destroytablist=true then{uiz_destroydslist(tablist)}
uiz_destroydslist(spacinglist)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_uiZ_tabslider</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//doanimation = false;
//if !ds_exists(spacinglist, ds_type_list) and ds_list_size(spacinglist) &gt; 0 then {
    //getlist = true;
//} else {
    if (oldvalue != value or updated or forceinanimation = true or(linearinter != 0)) and ds_exists(tablist, ds_type_list) and ds_list_size(spacinglist) &gt; max(value, oldvalue) then {
    //updated=false;
    if linearinter*2048!=0 then{
    updated=false;
    }

            if linearinter&lt;1 then {
            //sdbm("animating",animationtime,uiz_sc(animationtime))
                linearinter += uiz_sc(animationtime)// * dir
                uiz_tabslider_handleanimation()
            }else{
                uiz_updater_unstep();
                if goback {
                    value=oldvalue;
                    goback=false;
                }
            }

    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(tablist, ds_type_list) and ds_list_size(tablist) = ds_list_size(spacinglist) then {


    lastMouseItem=mouseItem;
    lastMouseOv=mouseOv;
    lastMouseV=mouseV;
    
    
    mouseItem=-1;

    var sz = ds_list_size(tablist)
    mouseV = rx;
    mouseOv=0;
    
    uiz_tabslider_getMouseItem();

    if mouseItem!=lastMouseItem then{
    //sdbm("upd slids nw");
        if mouseItem!=-1 then{
            //sdbm("upd slids nw");
            uiz_updater_FixViews_area_selfmarked(mouseOv,ry,mouseV,rly);
        }
        if lastMouseItem!=-1 then{
            //sdbm("upd slids ow");
            uiz_updater_FixViews_area_selfmarked(lastMouseOv,ry,lastMouseV,rly);
        }
        
    }

    if kmouseover=4 &amp;&amp; mouseItem!=value &amp;&amp; mouseItem!=-1 then{
        //sdbm("setting mouseitem",mouseOv);
        oldTabPos=newpos;
        oldTabWidth=newwidth;
        newTabPos=mouseOv;
        linearinter=0;
        //sdbm("setting item",mouseItem);
        value=mouseItem;
        updated=true;
        uiz_updater_step();
        }
    

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if kmouseover=uiz_nomouse then{
mouseItem=-1
uiz_updater_FixViews();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_mouse_docheck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>updated = false;
if uiz_cntn() then {
    //put draw code here
    var sz = ds_list_size(tablist)
    if ds_exists(tablist, ds_type_list) and sz = ds_list_size(spacinglist) then {
        if font &gt; -1 then {
            draw_set_font(font)
        }
        draw_set_valign(valign)
        draw_set_halign(halign)
        draw_set_color(textcolor)
        if uiz_selfmarked then{
            //sdbm("drawing selfmarked");
            var drawnSelectionSquare=false;
            if mouseItem!=lastMouseItem then{
                if mouseItem!=-1 then{
                    drawnSelectionSquare=true;
                    draw_square(mouseOv,ry,mouseV,rly,mouseoncolor,mouseonalpha*alpha);
                    draw_set_color(textcolor)
                    draw_set_alpha(alpha);
                    uiz_tabslider_drawtab(mouseItem,mouseOv);    
                }
                if lastMouseItem!=-1 then{
                    uiz_tabslider_drawtab(lastMouseItem,lastMouseOv);
                }
            }
        
            if updateBar || mouseOv = newpos || lastMouseOv = newpos then{
            //check to draw back selection square
            if (drawnSelectionSquare=false and updateBar and ((mouseOv&gt;=newpos &amp;&amp; mouseOv&lt;=newpos+newwidth) || (mouseV&gt;=newpos &amp;&amp; mouseV&lt;=newpos+newwidth))){
                draw_square(mouseOv,tabY,mouseV,rly,mouseoncolor,mouseonalpha*alpha);
            }
                updateBar=false;
                draw_square(newpos, tabY, newpos + newwidth, rly, markcolor, alpha)
                //sdbm("trying to draw square",newpos,newwidth);
            }
                //draw_square(rx,ry,rlx,rly,c_green,.5);
        }else{
                    //sdbm("drawing normal");
        var v = rx;
        if mouseItem!=-1 then{
            draw_square(mouseOv,ry,mouseV,rly,mouseoncolor,mouseonalpha*alpha);
        }
        draw_set_color(textcolor);
        draw_set_alpha(alpha);
        for (var i = 0; i &lt; sz; i++) {
            uiz_tabslider_drawtab(i,v);
            v += spacinglist[| i];
        }
        
        //draw_set_color(markcolor)
        draw_square(newpos, tabY, newpos + newwidth, rly, markcolor, alpha)
        //sdbm("trying to draw square 2",newpos,newwidth);
        //draw_rectangle(newpos, rly - uiz_getposy_self(marksize, marksizetype), newpos + newwidth, rly, 0)
        //draw_set_color(textcolor)
        
        }
    }

    uiz_containend()
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    if ds_exists(tablist, ds_type_list) and ds_list_size(tablist) = ds_list_size(spacinglist) then {
        var sz = ds_list_size(tablist)
        if font &gt; -1 then {
            draw_set_font(font)
        }
        draw_set_valign(valign)
        draw_set_halign(halign)
        draw_set_color(textcolor)
        var v = rx;
        for (var i = 0; i &lt; sz; i++) {
            draw_text(v + spacinglist[| i] * (halign / 2), ry + height * (valign / 2), uiz_gettext_contained(tablist[| i], spacinglist[| i]));
            var ov = v;
            v += spacinglist[| i];
            if uiz_getmouse_x() &gt; ov and uiz_getmouse_x() &lt; v then {
                draw_square(ov, ry, v, rly, uiz_km_retval(c_white, mouseoncolor, mouseincolor), alpha * uiz_km_retval(c_white, mouseonalpha, mouseinalpha))
                if kmouseover = 4 then {
                    value = i;
                    updated = true;
                }
            }
            if i = value then {
                draw_set_color(markcolor)
                draw_rectangle(newpos, rly - uiz_getposy_self(marksize, marksizetype), newpos + newwidth, rly, 0)
                draw_set_color(textcolor)
            }
        }
        //draw_debugpoint(dbg1,rly,c_red)
        //draw_debugpoint(dbg2,rly,c_blue)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if destroytablist=true then{uiz_destroydslist(tablist)}
uiz_destroydslist(spacinglist)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if destroytablist=true then{uiz_destroydslist(tablist)}
uiz_destroydslist(spacinglist)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
