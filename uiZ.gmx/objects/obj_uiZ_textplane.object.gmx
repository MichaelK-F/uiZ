<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 24
//#objectversion 1.0
uiz_objinit()
value=""
oldvalue=value
qstr=""
qstrinfy=""
oldfline=0;
font=-1//f//font//
qstrpos=0;
pline=0;
liney=0;
vpos=0;
selp1=0;
selp2=0;
selpmin=0;
selpmax=0;
selp1line=0;
selp2line=0;
selpminline=0;
selpmaxline=0;
selpx1=0;
selpx2=0;
selpxmin=0;
selpxmax=0;
lsz=0;
hasmouse=false;
hasselection=true;
pos=0;
posx=0;
posline=0;
textcolor=c_black//c//text color//
selectbackcolor=c_blue//c//selection background color//
selecttextcolor=c_white//c//selection text color//
typing=false;
lastkeyboard_key=0;
resetpos=false;
changesign=false;
whatsign=""
len=0;
vadpos=0;
startposline=0;

scrollbarsize=0.15//v//scrollbarsize//
scrollbarsizetype=dp//z//scrollbarsizetype//
scrollbarsprite=spr_uiZ_scrollbar//p//sprite//
scrollbarcolor=c_white//c//color//
scrollbartexturemode=uiz_texturemode_fill//t//texturemode//
scroll=0
lastscroll=0;
scrolllines=100
scrollspeed=1//v//scrollspeed//
doscroll=false;
lastbegscrpos=0


typeanimationin=uiz_exponential_in//a//type animation in//
typeanimationout=uiz_exponential_in//a//type animation out//
countspeed=1//v//type animation time//
count=0;
typecolor=c_black//c//type indicater color//




lins=0;
linefit=0;
qstrsz=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control mouse pos and selection.
kmouseover=uiz_mouse_isonobject_leftcheck(id)




if kmouseover&lt;=1 or kmouseover=4 and hasmouse=true then{
hasmouse=false;
global.mousefrozen=0;
}
minpos=0;
//get selection point
if kmouseover&gt;0 or hasmouse=true then{
//get selection line in qstr
if font&gt;-1 then{draw_set_font(font)}
//setup stuff for loop
lsz=string_height("ƒF|⎲}g")
var lan=string_length(qstr)
//check max lines
lines=0;
for(var i=0;i&lt;=lan;i++){
if string_char_at(qstr,i)="#" or string_char_at(qstr,i)=chr($0A) then{lines++}
}
liney=clamp(floor((uiz_getmouse_y()-sy)/lsz),0,lines)

pline=0;
var plinechar=1;
//loop trough qstr to find the line
for(var i=0;i&lt;=lan;i++){

qstrpos=0;
//check for new line
//sdbm(string_char_at(qstr,i),ord(string_char_at(qstr,i)))
if string_char_at(qstr,i)="#" or string_char_at(qstr,i)=chr($0A) then{pline++;
//if string_char_at(qstr,i)="#" then{plinechar=i+1;}else{plinechar=i;}
plinechar=i+1
}
//if on the right line
if pline=liney then{
//sdbm("exec",pline,liney)
//process the right line.
if i=0 then{var w=0}else{
//sdbm(uiz_string_copy(qstr,plinechar,i),i,plinechar)
var w=string_width(uiz_string_copy(qstr,plinechar,i));
 }
//sdbm(uiz_string_copy(qstr,plinechar,i))
var sta="a"
if i&lt;lan then{sta=string_char_at(qstr,i+1)}
if (i=0 and uiz_getmouse_x()&lt;string_width(string_char_at(qstr,1))/2) or  w&gt;uiz_getmouse_x()-sx or sta="#" or sta=chr($0A) then{
qstrpos=i-1;
//select new pos
if kmouseover=4 and uiz_getmouse_x()&lt;slx-scblwidth and scroll&lt;0 then{
minpos=0
if i&gt;1 then{
var w2=string_width(string_char_at(qstr,i))
if -w2/2&gt;uiz_getmouse_x()-sx-w then{
posx=string_width(uiz_string_copy(qstr,plinechar,i-1))
minpos=1;
}else{
minpos=0
posx=w
}
}else{
minpos=0
posx=0
w=0
}

posline=liney;
//startposline=uiz_getlines(string_copy(qstr,1,lastbegscrpos));
startposline=uiz_positify(scroll)
}


//check for selection
if kmouseover=3 and uiz_getmouse_x()&lt;slx-scblwidth and scroll&lt;0 then{
hasmouse=true;
global.mousefrozen=true;
//sdbm(w,liney)
selpx1=w;
selp1line=liney;
}
//check second pos of selection
if hasmouse=true then{
//sdbm(w,liney)
selpx2=w;
selp2line=liney;
}
break;
}
}
}
//find the right pos inside the value string.

vpos=vadpos;
for(var i=1;i&lt;=qstrpos;i++){
//if newline
//if ((string_char_at(qstr,i)="#" or string_char_at(qstr,i)=chr($0A))  and !(string_char_at(value,vpos)="#")or string_char_at(qstr,vpos)=chr($0A) or string_char_at(qstr,vpos)=chr($0D))
if string_char_at(qstr,i)!=string_char_at(value,vpos)
//if space
//or (string_char_at(qstr,i)=" " and string_char_at(value,vpos)!=" ")
  then{
//newlines don't match up
}else{
//characters match up
vpos++
}
}
//set selp1, selp2
if kmouseover=3 then{selp1=vpos}
if hasmouse=true then{
selp2=vpos
//set all the min and max variables to what they are supposed to be.
hasselection=true
if selp1line&lt;selp2line then{
//p1 is first
selpminline=selp1line
selpmaxline=selp2line
selpmin=selp1;
selpmax=selp2;
selpxmin=selpx1;
selpxmax=selpx2;
}else{
if selp1line=selp2line then{
//p1 and p2 on same line
selpminline=selp1line
selpmaxline=selp2line
if selpx1&lt;selpx2 then{
selpmin=selp1;
selpmax=selp2;
selpxmin=selpx1;
selpxmax=selpx2;
}else{
if selpx1=selpx2 then{
hasselection=false;
}
selpmin=selp2;
selpmax=selp1;
selpxmin=selpx2;
selpxmax=selpx1;
}
}else{
//p2 is first
selpminline=selp2line
selpmaxline=selp1line
selpmin=selp2;
selpmax=selp1;
selpxmin=selpx2;
selpxmax=selpx1;
}

}
//END setting min and max variables

}
if kmouseover=4 and uiz_getmouse_x()&lt;slx-scblwidth and scroll&lt;0 then{
pos=vpos-minpos
//uiz_textare_snappos_left()
//qpos=qstrpos
//reH
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check the typing
if kmouseover&gt;0 then{uiz_set_cursor(cr_beam)}

if keyboard_check(vk_control) then{
if keyboard_check(ord("C")) then{
clipboard_set_text(uiz_string_copy(value,selpmin+1,selpmax))
}
if keyboard_check(ord("A")) then{
selp1=0
selp2=len+1
selpxmin=0;
selpmin=selp1;
selpmax=selp2;
selpminline=0;
qlen=string_length(qstr)
selpmaxline=0;
var lastat=1;
for(var i=1;i&lt;=qlen;i++){
if string_char_at(qstr,i)="#" or string_char_at(qstr,i)=chr($0A) then{
selpmaxline+=1;
var lastat=i;
}
}
selpxmax=string_width(uiz_string_copy(qstr,lastat+1,qlen));

}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle scroll
if doscroll=true then{
var fline=min(uiz_positify(scroll),scrolllines)
if oldfline!=fline then{







var linecount=1;
vadpos=1;

for(var i=1;i&lt;=qstrsz;i++){
var c=string_char_at(qstrinfy,i)
if c=string_char_at(value,vadpos) then{
vadpos++;
}
if c="#" or c=chr($0A) or fline=0 then{
if linecount=fline or fline=0 then{
var oldi=i+sign(fline);


linecount=0;
for(var i=oldi;i&lt;=qstrsz;i++){
var c=string_char_at(qstrinfy,i)
if c="#" or c=chr($0A) or (fline=scrolllines and i=qstrsz) then{
if linecount&gt;=linefit-1 or (fline=scrolllines and i=qstrsz) then{
lastbegscrpos=oldi
qstr=uiz_string_copy(qstrinfy,oldi,i)
break;
}
linecount++;
}
}
break;
}

linecount++;
}
}
//reset pos
if uiz_positify(scroll)!=uiz_positify(lastscroll) then{
posline=(posline+startposline)-uiz_positify(scroll)
startposline=uiz_positify(scroll)
//here
lastscroll=scroll;
}












oldfline=fline
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_mouse_docheck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//update=0;
//updated=0
//draw_debugpoint(slx-scblwidth,10,c_green)
if uiz_cntn() then{
draw_set_color(textcolor)
//draw background
draw_square(rx,ry,rlx,rly,c_white,alpha)
//setup text settings
draw_set_valign(fa_top)
draw_set_halign(fa_left)

//draw the selection background
var lns=selpmaxline-selpminline

if lns&gt;0 then{
//first line
draw_square(rx+selpxmin,ry+selpminline*lsz,rlx,ry+(selpminline+1)*(lsz),selectbackcolor,alpha)
//last line
draw_square(rx,ry+selpmaxline*lsz,rx+selpxmax,ry+(selpmaxline+1)*(lsz),selectbackcolor,alpha)
if lns&gt;1 then{
//middle lines
draw_square(rx,ry+(selpminline+1)*(lsz),rlx,ry+selpmaxline*lsz,selectbackcolor,alpha)
}
}else{
//first line
draw_square(rx+selpxmin,ry+selpminline*lsz,rx+selpxmax,ry+(selpminline+1)*(lsz),selectbackcolor,alpha)
//draw_debugpoint(selpxmin,0,c_red)
//draw_debugpoint(selpxmax,0,c_blue)
}
draw_text(rx,ry,qstr)
if pos&gt;0 and hasselection=false and posline&gt;0 and posline*lsz&lt;height then{
count+=1/(countspeed*room_speed);
if count&gt;=1 then{count=0}
if count&lt;0.5 then{
var anim=uiz_animation_getFunction(count*2,typeanimationin)
}else{
var anim=1-uiz_animation_getFunction((count-0.5)*2,typeanimationout)}
draw_set_alpha(anim*alpha)
draw_set_color(typecolor)
draw_line(rx+posx,ry+(posline)*lsz,rx+posx,ry+(posline+1)*lsz)
}
draw_set_alpha(1)
//draw scrollbar
if doscroll=true then{
scroll=uiz_drawscrollbar_vertical_legacy(rlx-scblwidth,ry,rlx,rly,scrollbarsprite,scrollbarcolor,scrollbartexturemode,scroll,scrolllines,true,scrollspeed)
}

uiz_containend()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
