<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create base of template
//init uiz
uiz_init()

//setup frameset
frameset=uiz_frameset_create()
anchor_1=uiz_frameset_divide_horizontal(frameset,0.5,dp,1,xtra)
//get the top bar (the first frame, so array index 0)
frame_topbar=anchor_1.frameat[0]
//make the topbar draw a color
frame_topbar.markcolor=uiz_htmltocolor($3f51b5)//indigo color
frame_topbar.mark=true//make it markable
//add shadow
frame_topbar.shadow=true
frame_topbar.shadowL=0;
frame_topbar.shadowR=0;
frame_topbar.shadowT=0;
//give it some depth to make it in the front.
frame_topbar.adddepth=1000
//get the bottom part to put our ui in (the second frame, so array index 1)
frame_main=anchor_1.frameat[1]
//fix frameset
uiz_fixgeneralpos(frameset)

//create the slidable frame
frame_sidebar=uiz_c(obj_uiZ_frame)
//put it side the main frame
uiz_setParent(frame_sidebar,frame_main)
//put in front
frame_sidebar.adddepth=900
//fill in height
frame_sidebar.posinframey=uiz_fill
//put it on the left side of the screen, but outside the screen.
frame_sidebar.posinframex=uiz_snapleft
frame_sidebar.setpointx=uiz_right
//make the sidebar a size
frame_sidebar.posvalw=2.5
frame_sidebar.posvalwtype=dp
//make the sidebar a color
frame_sidebar.markcolor=c_white
frame_sidebar.mark=true//make it markable

uiz_fixgeneralpos(frame_sidebar)

//add button
menubutton=uiz_c(obj_uiZ_spriteanimationbutton)
uiz_setParent(menubutton,frame_topbar)
menubutton.posinframex=px;
menubutton.posvalx=0;
//make the width the same as the height
menubutton.posvalw=1;
menubutton.posvalwtype=fcy;
menubutton.posinframey=uiz_fill;
uiz_fixgeneralpos(menubutton)

//add a cover to gray out the mainframe when the menu is open
menucover=uiz_c(obj_uiZ_cover)
uiz_setParent(menucover,frame_main)
menucover.posinframex=uiz_fill
menucover.posinframey=uiz_fill
menucover.destroyonclick=false;
menucover.enabled=false;
uiz_fixgeneralpos(menucover)

//create an object to allow the mouse to drag the menu.
menumousecover=uiz_c(obj_uiZ_mouseband)
uiz_setParent(menumousecover,frame_sidebar)
menumousecover.posinframex=uiz_snapright;
menumousecover.posinframey=uiz_fill;
menumousecover.posvalwtype=dp;
menumousecover.posvalw=0.5;
menumousecover.setpointx=uiz_middle;
uiz_fixgeneralpos(menumousecover)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables
menubaranimation=uiz_circular_out
mainframeblackalpha=0.4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make the menu work
//if uiz_right=1 and uiz_left=0 and uiz_middle=0.5 then we can actually interpolate between those values to
//make the frame move from uiz_right(collapsed) to uiz_left(extended)
//also make the cover above the main frame activate/deactivate

if menubutton.update=true then{
var f=uiz_animation_getFunction(1-uiz_spriteanimationbutton_getintervalue(menubutton),menubaranimation);
frame_sidebar.setpointx=f;
uiz_fixgeneralpos(frame_sidebar)
if f=1 then{menucover.enabled=false}else{menucover.enabled=true}
menucover.image_alpha=(1-f)*mainframeblackalpha;
uiz_fixgeneralpos(menucover)
uiz_fixgeneralpos(menumousecover)
}

if menucover.kmouseover&gt;2 then{
menubutton.value=false;
}


//make the mouse able to drag the menu.
/*
if menumousecover.update=true then{

var of=1-clamp(abs(menumousecover.movedx/frame_sidebar.width),0,1);;
if menubutton.value=false then{
var f=of
}else{
var f=1-of
}

uiz_fixgeneralpos(frame_sidebar)
menucover.image_alpha=(1-f)*mainframeblackalpha;
uiz_spriteanimationbutton_setvalue(menubutton,of,-1,false)
//if of=1 then{uiz_spriteanimationbutton_setvalue(menubutton,1,false,false) uiz_mouseband_releasemouse(menumousecover)}
if of=0 then{uiz_spriteanimationbutton_setvalue(menubutton,1,true,false) menucover.image_alpha=mainframeblackalpha; uiz_mouseband_releasemouse(menumousecover)}
uiz_fixgeneralpos(menucover)
uiz_fixgeneralpos(menumousecover)
}
*/
if menumousecover.update=true and menumousecover.hasmouse=true then{
if menubutton.oldvalue=false then{

var f=clamp(abs(menumousecover.movedx/frame_sidebar.width),0,1);
if f=1 then{uiz_mouseband_releasemouse(menumousecover)}
menucover.image_alpha=(f)*mainframeblackalpha;
frame_sidebar.setpointx=1-f;
uiz_spriteanimationbutton_setvalue(menubutton,f,true,false)
if f&gt;0 then{menucover.enabled=true;}
if f=1 then{uiz_spriteanimationbutton_setvalue(menubutton,1,true,false)}
uiz_fixgeneralpos(menucover)
uiz_fixgeneralpos(frame_sidebar)
uiz_fixgeneralpos(menumousecover)

}else{

var f=1-clamp(abs(menumousecover.movedx/frame_sidebar.width),0,1);
if uiz_getmouse_x()&lt;max(0,frame_sidebar.parent.rx) then{f=0;}
if f=0 then{uiz_mouseband_releasemouse(menumousecover) menucover.enabled=false;}
menucover.image_alpha=(f)*mainframeblackalpha;
frame_sidebar.setpointx=1-f;
uiz_spriteanimationbutton_setvalue(menubutton,1-f,false,false)

if f=0 then{uiz_spriteanimationbutton_setvalue(menubutton,1,false,false)}
uiz_fixgeneralpos(menucover)
uiz_fixgeneralpos(frame_sidebar)
uiz_fixgeneralpos(menumousecover)

}
//sdbm(f,menubutton.value,menubutton.oldvalue)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
