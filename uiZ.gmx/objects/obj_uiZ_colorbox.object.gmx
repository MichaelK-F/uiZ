<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 6
//#objectversion 1.0
uiz_objinit()
value=0//c//initial color//
lastvalue=0
updated=0
update=0
w=0
h=0
s=0
v=255
r=0
g=0
b=0

HueMoves=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.colorscreen=id and instance_exists(w) then{
uiz_destroyobject_animation_default(w)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.colorscreen=id and !instance_exists(w) then{global.colorscreen=0}
if global.colorscreen=id and instance_exists(w) then{
if w.finaldestroy=1 then{global.colorscreen=0}
}
if global.colorscreen!=id or !instance_exists(w) then{
    uiz_updater_unstep();
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///add to list if color is pressed and check if new value is pressed

globalvar colorlist;
if c.kmouseover=3 then{
//show_message("omg")
uiz_colorbox_checkcolordump()
ds_list_add(colorlist,c.color)
uiz_updater_FixViews_with(colorboxes);
}

//check if something is pressed
if colorboxes.updated=1 then{
if colorboxes.sz&gt;colorboxes.selpos then{

c.color=colorlist[| colorboxes.selected]
//uiz_colorbox_updatergb(1,1,1)
//boxval.value=color_get_value(c.color)
h=color_get_hue(c.color)
s=color_get_saturation(c.color)
v=color_get_value(c.color)
r=color_get_red(c.color)
g=color_get_green(c.color)
b=color_get_blue(c.color)
uiz_colorbox_updatergb(1,1,1,1,0)
//uiz_hue_setvalues(uh,h,s,v)
uh.h=h
uh.s=s
boxval.value=v/255
//h.s=color_get_saturation(c.color)
boxval.color1 = make_color_hsv(h, s, 0);
boxval.color2 = make_color_hsv(h, s, 255);
uiz_updater_FixViews_with(boxval);
}}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set new color if window is opened
    if boxred.update = 1 or boxblue.update = 1 or boxgreen.update = 1 then {
        HueMoves = -1;
    }
    if (uh.update = 1 and HueMoves &gt;= 0) or uh.selected = 1 then {
        c.color = uh.incolor;
        uiz_updater_FixViews_with(c);
        h = uh.inh;
        s = uh.ins;
        boxval.color1 = make_color_hsv(h, s, 0);
        boxval.color2 = make_color_hsv(h, s, 255);
        uiz_updater_FixViews_with(boxval);
        //if HueMoves=false then{
        c.color = uh.tocolor;
        uiz_colorbox_updatergb(1, 1, 1, 1, 0)
        c.color = uh.incolor;
        uiz_slider_setvalue(boxval, v / 255)
        //}
        HueMoves = true;
        uiz_stringbox_setvalue(valh,h)
        uiz_stringbox_setvalue(vals,s)
    } else {
        HueMoves = false;
    }
    if boxval.updated = true then {
        c.color = make_color_hsv(uh.h, uh.s, boxval.value * 255)
        uiz_updater_FixViews_with(c);
        uh.v = boxval.value * 255;
        v = uh.v;
        //sdbm("val",boxval.invalue,v)
        uiz_colorbox_updatergb(1, 1, 1, 1, 0)
        c.color = make_color_hsv(uh.h, uh.s, boxval.invalue * 255)
        uiz_stringbox_setvalue(valv,v);
        uiz_updater_FixViews_with(uh);
    }
    if boxval.update = true then {
        c.color = make_color_hsv(uh.h, uh.s, boxval.invalue * 255)
    }
    //get updates, prevent from one update to trigger another (unnecessary update)
    var boxred_updated = boxred.updated;
    var boxgreen_updated = boxgreen.updated;
    var boxblue_updated = boxblue.updated;
    var valred_update = valred.update;
    var valgreen_update = valgreen.update;
    var valblue_update = valblue.update;
    var valh_update = valh.update;
    var vals_update = vals.update;
    var valv_update = valv.update;
    if HueMoves = false then {
        if boxred_updated = true then {
            r = boxred.value * 255;
            c.color = make_color_rgb(r, g, b);
            uiz_updater_FixViews_with(c);
            h = colour_get_hue(c.color);
            s = colour_get_saturation(c.color);
            v = colour_get_value(c.color);
            uiz_hue_setvalues(uh, h, s, v)
            uiz_slider_setvalue(boxval, v / 255)
            boxval.color1 = make_color_hsv(colour_get_hue(uh.color), colour_get_saturation(uh.color), 0);
            boxval.color2 = make_color_hsv(colour_get_hue(uh.color), colour_get_saturation(uh.color), 255);
            uiz_updater_FixViews_with(boxval);
            uiz_colorbox_updatergb(0, 1, 1, 0, 0)
            uiz_stringbox_setvalue(valred,r)
            uiz_stringbox_setvalue(valh,h)
            uiz_stringbox_setvalue(vals,s)
            uiz_stringbox_setvalue(valv,v)
            uiz_updater_FixViews_with(uh);
        }
        if boxgreen_updated = true then {
            g = boxgreen.value * 255;
            c.color = make_color_rgb(r, g, b);
            uiz_updater_FixViews_with(c);
            h = colour_get_hue(c.color);
            s = colour_get_saturation(c.color);
            v = colour_get_value(c.color);
            uiz_hue_setvalues(uh, h, s, v)
            uiz_slider_setvalue(boxval, v / 255)
            boxval.color1 = make_color_hsv(colour_get_hue(uh.color), colour_get_saturation(uh.color), 0);
            boxval.color2 = make_color_hsv(colour_get_hue(uh.color), colour_get_saturation(uh.color), 255);
            uiz_updater_FixViews_with(boxval);
            uiz_colorbox_updatergb(1, 0, 1, 0, 0)
            uiz_stringbox_setvalue(valgreen,g)
            uiz_stringbox_setvalue(valh,h)
            uiz_stringbox_setvalue(vals,s)
            uiz_stringbox_setvalue(valv,v)
            uiz_updater_FixViews_with(uh);
        }
        if boxblue_updated = true then {
            b = boxblue.value * 255;
            c.color = make_color_rgb(r, g, b);
            uiz_updater_FixViews_with(c);
            h = colour_get_hue(c.color);
            s = colour_get_saturation(c.color);
            v = colour_get_value(c.color);
            uiz_hue_setvalues(uh, h, s, v)
            uiz_slider_setvalue(boxval, v / 255)
            boxval.color1 = make_color_hsv(colour_get_hue(uh.color), colour_get_saturation(uh.color), 0);
            boxval.color2 = make_color_hsv(colour_get_hue(uh.color), colour_get_saturation(uh.color), 255);
            uiz_updater_FixViews_with(boxval);
            uiz_colorbox_updatergb(1, 1, 0, 0, 0)
            uiz_stringbox_setvalue(valblue,b)
            uiz_stringbox_setvalue(valh,h)
            uiz_stringbox_setvalue(vals,s)
            uiz_stringbox_setvalue(valv,v)
            uiz_updater_FixViews_with(uh);
        }
    }
    //valueboxes
    if valred_update = 1 then {
        r = real(uiz_stringbox_getvalue(valred));
        c.color = make_color_rgb(r, g, b);
        uiz_updater_FixViews_with(c);
        h = colour_get_hue(c.color);
        s = colour_get_saturation(c.color);
        v = colour_get_value(c.color);
        uiz_hue_setvalues(uh, h, s, v)
        uiz_slider_setvalue(boxval, v / 255)
        boxval.color1 = make_color_hsv(colour_get_hue(uh.incolor), colour_get_saturation(uh.incolor), 0);
        boxval.color2 = make_color_hsv(colour_get_hue(uh.incolor), colour_get_saturation(uh.incolor), 255);
        uiz_updater_FixViews_with(boxval);
        uiz_colorbox_updatergb(1, 1, 1, 1, 0);
        uiz_stringbox_setvalue(valh,h)
        uiz_stringbox_setvalue(vals,s)
        uiz_stringbox_setvalue(valv,v)
        uiz_updater_FixViews_with(uh);
    }

    //sdbm("doing update check");
    if valgreen_update = 1 then {
        g = real(uiz_stringbox_getvalue(valgreen));
        c.color = make_color_rgb(r, g, b);
        uiz_updater_FixViews_with(c);
        h = colour_get_hue(c.color);
        s = colour_get_saturation(c.color);
        v = colour_get_value(c.color);
        uiz_hue_setvalues(uh, h, s, v)
        uiz_slider_setvalue(boxval, v / 255)
        boxval.color1 = make_color_hsv(colour_get_hue(uh.incolor), colour_get_saturation(uh.incolor), 0);
        boxval.color2 = make_color_hsv(colour_get_hue(uh.incolor), colour_get_saturation(uh.incolor), 255);
        uiz_updater_FixViews_with(boxval);
        uiz_colorbox_updatergb(1, 1, 1, 1, 0);
        uiz_stringbox_setvalue(valh,h)
        uiz_stringbox_setvalue(vals,s)
        uiz_stringbox_setvalue(valv,v)
        uiz_updater_FixViews_with(uh);
    }

    if valblue_update = 1 then {
        b = real(uiz_stringbox_getvalue(valblue));
        c.color = make_color_rgb(r, g, b);
        uiz_updater_FixViews_with(c);
        h = colour_get_hue(c.color);
        s = colour_get_saturation(c.color);
        v = colour_get_value(c.color);
        uiz_hue_setvalues(uh, h, s, v)
        uiz_slider_setvalue(boxval, v / 255)
        boxval.color1 = make_color_hsv(colour_get_hue(uh.incolor), colour_get_saturation(uh.incolor), 0);
        boxval.color2 = make_color_hsv(colour_get_hue(uh.incolor), colour_get_saturation(uh.incolor), 255);
        uiz_updater_FixViews_with(boxval);
        uiz_colorbox_updatergb(1, 1, 1, 1, 0);
        uiz_stringbox_setvalue(valh,h)
        uiz_stringbox_setvalue(vals,s)
        uiz_stringbox_setvalue(valv,v)
        uiz_updater_FixViews_with(uh);
    }
    if valh_update = 1 then {
        h = real(uiz_stringbox_getvalue(valh));
        c.color = make_color_hsv(h, s, v);
        uiz_updater_FixViews_with(c);
        r = colour_get_red(c.color);
        g = colour_get_green(c.color);
        b = colour_get_blue(c.color);
        uiz_hue_setvalues(uh, h, s, v)
        boxval.color1 = make_color_hsv(colour_get_hue(uh.incolor), colour_get_saturation(uh.incolor), 0);
        boxval.color2 = make_color_hsv(colour_get_hue(uh.incolor), colour_get_saturation(uh.incolor), 255);
        uiz_updater_FixViews_with(boxval);
        uiz_colorbox_updatergb(1, 1, 1, 1, 0);
        uiz_stringbox_setvalue(valred,r)
        uiz_stringbox_setvalue(valgreen,g)
        uiz_stringbox_setvalue(valblue,b)
        uiz_updater_FixViews_with(uh);
    }
    if vals_update = 1 then {
        s = real(uiz_stringbox_getvalue(vals));
        c.color = make_color_hsv(h, s, v);
        uiz_updater_FixViews_with(c);
        r = colour_get_red(c.color);
        g = colour_get_green(c.color);
        b = colour_get_blue(c.color);
        uiz_hue_setvalues(uh, h, s, v)
        boxval.color1 = make_color_hsv(colour_get_hue(uh.incolor), colour_get_saturation(uh.incolor), 0);
        boxval.color2 = make_color_hsv(colour_get_hue(uh.incolor), colour_get_saturation(uh.incolor), 255);
        uiz_updater_FixViews_with(boxval);
        uiz_colorbox_updatergb(1, 1, 1, 1, 0);
        uiz_stringbox_setvalue(valred,r)
        uiz_stringbox_setvalue(valgreen,g)
        uiz_stringbox_setvalue(valblue,b)
        uiz_updater_FixViews_with(uh);
    }
    if valv_update = 1 then {
        v = real(uiz_stringbox_getvalue(valv));
        c.color = make_color_hsv(h, s, v);
        uiz_updater_FixViews_with(c);
        r = colour_get_red(c.color);
        g = colour_get_green(c.color);
        b = colour_get_blue(c.color);
        uiz_hue_setvalues(uh, h, s, v)
        uiz_colorbox_updatergb(1, 1, 1, 1, 0);
        uiz_stringbox_setvalue(valred,r)
        uiz_stringbox_setvalue(valgreen,g)
        uiz_stringbox_setvalue(valblue,b)
        uiz_slider_setvalue(boxval,v/255)
        uiz_updater_FixViews_with(uh);
    }
    //check for changes, and apply them
    lastvalue = value
    value = c.color
    if (lastvalue = value) then {
        //updated=0;
        //}else{updated=1}
        update = 0;
    } else {
        update = 1
    }

if update = 1 or updated = 1 then {
    uiz_updater_FixViews();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (live_call()) return live_result;

if global.colorscreen != id or!instance_exists(w) then {

    if mouse_check_button_released(mb_left) and global.mouseover = id then {
        //spawn in a color menu
        if global.colorscreen != 0 and instance_exists(global.colorscreen) and instance_exists(global.colorscreen.w) then {
            //remove old window
            uiz_destroyobject(global.colorscreenobject)
        }

        uiz_colorbox_checkcolordump()
        sdbm("[uiZ|INFO]Spawning color menu")
        uiz_updater_step();
        global.colorscreen = id
        global.colorscreenobject = id
        w = uiz_window_create(4, dp, 5, dp)
        w.x = uiz_getmouse_x()
        w.y = uiz_getmouse_y()
        w.button_maximize = 0;
        w.button_minimize = 0;
        w.button_cross = 1;
        w.contain = 3
        w.windowtext = "colorpicker"
        uiz_window_setminimumsize(w, 2, dp, 3, dp)
        uiz_fixgeneralpos(w)
        f = w;
        fs = uiz_frameset_create();
        uiz_setparent(fs, f)
        div1 = uiz_framedivisionvertical(fs, 0.7, fc, 1, xtra)
        picker = div1.frameat[0]
        sep = div1.frameat[1]

        div2 = uiz_framedivisionhorizontal(picker, 0.4, fc, 0.2, fc, 1, xtra)
        hue = div2.frameat[0]
        valsz = div2.frameat[1]
        valsels = div2.frameat[2]

        hue = picker
        uiz_fixframesetpos(fs)
        uh = instance_create(0, 0, obj_uiZ_huesquare)
        uiz_setparent(uh, hue)
        uh.posinframex = uiz_fill
        uh.posinframey = uiz_fill
        uh.posvalx = 0
        uh.posvaly = 0
        uiz_fixgeneralpos(uh)

        div3 = uiz_framedivisionhorizontal(sep, 0.1, fc, 1, xtra)
        colbox = div3.frameat[0]
        selector = div3.frameat[1]


        colorboxes = instance_create(0, 0, obj_uiZ_colorboxes)
        uiz_setparent(colorboxes, selector)
        colorboxes.posinframex = uiz_fill
        colorboxes.posinframey = uiz_fill
        uiz_fixgeneralpos(colorboxes)

        //color
        c = instance_create(0, 0, obj_uiZ_square)
        uiz_setparent(c, colbox)
        c.posinframex = uiz_fill
        c.posinframey = uiz_fill
        c.color = value
        uiz_fixgeneralpos(c)

        //make sure values are alright
        h = colour_get_hue(value);
        s = colour_get_saturation(value);
        v = colour_get_value(value);
        r = colour_get_red(value);
        g = colour_get_green(value);
        b = colour_get_blue(value);

        //value slider
        boxval = instance_create(0, 0, obj_uiZ_slider)
        uiz_setparent(boxval, valsz)
        boxval.coloroutline1 = c_black
        boxval.coloroutline2 = c_white
        boxval.value = v / 255
        boxval.posinframex = uiz_fill
        boxval.posinframey = fc
        boxval.posvaly = 0.05
        boxval.posvalhtype = fc
        boxval.posvalh = 0.2
        boxval.color1 = c_black
        boxval.color2 = c_white
        boxval.coloroutline1 = c_black
        boxval.coloroutline2 = c_white
        boxval.outline = 1
        boxval.slidersize = 0.05;
        boxval.slidersizetype = dp;
        boxval.slidercolor=make_colour_rgb(125,165,255);
        uiz_slider_setvalue(boxval, v / 255)
        uiz_fixgeneralpos(boxval)

        //red slider
        boxred = instance_create(0, 0, obj_uiZ_slider)
        uiz_setparent(boxred, valsz)
        boxred.coloroutline1 = c_black
        boxred.coloroutline2 = c_red
        boxred.value = r / 255
        boxred.posinframex = uiz_fill
        boxred.posinframey = fc
        boxred.posvaly = 0.3
        boxred.posvalhtype = fc
        boxred.posvalh = 0.2
        boxred.color1 = c_black
        boxred.color2 = c_red
        boxred.outline = 1
        boxred.coloroutline1 = c_black
        boxred.coloroutline2 = c_red
        uiz_fixgeneralpos(boxred)
        
        //green slider
        boxgreen = instance_create(0, 0, obj_uiZ_slider)
        uiz_setparent(boxgreen, valsz)
        boxgreen.value = g / 255
        boxgreen.posinframex = uiz_fill
        boxgreen.posinframey = fc
        boxgreen.posvaly = 0.55
        boxgreen.posvalhtype = fc
        boxgreen.posvalh = 0.2
        boxgreen.color1 = c_black
        boxgreen.color2 = c_green
        boxgreen.coloroutline1 = c_black
        boxgreen.coloroutline2 = c_lime
        boxgreen.outline = 1
        boxgreen.posvalhpxdif = -1
        uiz_fixgeneralpos(boxgreen)
        
        //red slider
        boxblue = instance_create(0, 0, obj_uiZ_slider)
        uiz_setparent(boxblue, valsz)
        boxblue.coloroutline1 = c_black
        boxblue.coloroutline2 = c_blue
        boxblue.value = b / 255
        boxblue.posinframex = uiz_fill
        boxblue.posinframey = fc
        boxblue.posvaly = 0.80
        boxblue.posvalhtype = fc
        boxblue.posvalh = 0.2
        boxblue.color1 = c_black
        boxblue.color2 = c_blue
        boxblue.coloroutline1 = c_black
        boxblue.coloroutline2 = c_blue
        boxblue.outline = 1
        uiz_fixgeneralpos(boxblue)
        
        //the valueboxes
        valsgrid = uiz_grid_create(4, 3)
        uiz_setparent(valsgrid, valsels)
        uiz_fixgridpos(valsgrid)
        uiz_setgridframes(valsgrid)
        uiz_gridsize_col(valsgrid, 0, 0.1, fc)
        uiz_gridsize_col(valsgrid, 1, 0.4, fc)
        uiz_gridsize_col(valsgrid, 2, 0.1, fc)
        uiz_gridsize_col(valsgrid, 3, 0.4, fc)
        uiz_setgridframes(valsgrid)
        uiz_fixgridpos(valsgrid)

        valredtext = instance_create(0, 0, obj_uiZ_drawtext)
        uiz_setparent(valredtext, uiz_gridobject(valsgrid, 0, 0))
        valredtext.posinframex = uiz_fill
        valredtext.posinframey = uiz_fill
        valredtext.text = "r"
        uiz_fixgeneralpos(valredtext)

        valgreentext = instance_create(0, 0, obj_uiZ_drawtext)
        uiz_setparent(valgreentext, uiz_gridobject(valsgrid, 0, 1))
        valgreentext.posinframex = uiz_fill
        valgreentext.posinframey = uiz_fill
        valgreentext.text = "g"
        uiz_fixgeneralpos(valgreentext)

        valbluetext = instance_create(0, 0, obj_uiZ_drawtext)
        uiz_setparent(valbluetext, uiz_gridobject(valsgrid, 0, 2))
        valbluetext.posinframex = uiz_fill
        valbluetext.posinframey = uiz_fill
        valbluetext.text = "b"
        uiz_fixgeneralpos(valbluetext)

        valred = instance_create(0, 0, obj_uiZ_stringbox)
        uiz_setparent(valred, uiz_gridobject(valsgrid, 1, 0))
        valred.acceptOnlyNumbers = true;
        valred.acceptOnlyIntegers = true;
        valred.acceptOnlyPositive = true;
        valred.numberCounter_enable = true;
        valred.posinframex = uiz_fill
        valred.posinframey = uiz_center
        valred.posvalh = 0.3
        valred.posvalhtype = dp
        valred.minvalue = 0
        valred.maxvalue = 255
        valred.allowdec = 0
        uiz_stringbox_setvalue(valred, string(r))
        uiz_fixgeneralpos(valred)

        valgreen = instance_create(0, 0, obj_uiZ_stringbox)
        uiz_setparent(valgreen, uiz_gridobject(valsgrid, 1, 1))
        valgreen.acceptOnlyNumbers = true;
        valgreen.acceptOnlyIntegers = true;
        valgreen.acceptOnlyPositive = true;
        valgreen.numberCounter_enable = true;
        valgreen.posinframex = uiz_fill
        valgreen.posinframey = uiz_center
        valgreen.posvalh = 0.3
        valgreen.posvalhtype = dp
        valgreen.minvalue = 0
        valgreen.maxvalue = 255
        valgreen.allowdec = 0
        uiz_stringbox_setvalue(valgreen, string(g))
        uiz_fixgeneralpos(valgreen)

        valblue = instance_create(0, 0, obj_uiZ_stringbox)
        uiz_setparent(valblue, uiz_gridobject(valsgrid, 1, 2))
        valblue.acceptOnlyNumbers = true;
        valblue.acceptOnlyIntegers = true;
        valblue.acceptOnlyPositive = true;
        valblue.numberCounter_enable = true;
        valblue.posinframex = uiz_fill
        valblue.posinframey = uiz_center
        valblue.posvalh = 0.3
        valblue.posvalhtype = dp
        valblue.minvalue = 0
        valblue.maxvalue = 255
        valblue.allowdec = 0
        uiz_stringbox_setvalue(valblue, string(b))
        uiz_fixgeneralpos(valblue)




        //hsv valueboxes
        valhtext = instance_create(0, 0, obj_uiZ_drawtext)
        uiz_setparent(valhtext, uiz_gridobject(valsgrid, 2, 0))
        valhtext.posinframex = uiz_fill
        valhtext.posinframey = uiz_fill
        valhtext.text = "h"
        uiz_fixgeneralpos(valhtext)

        valstext = instance_create(0, 0, obj_uiZ_drawtext)
        uiz_setparent(valstext, uiz_gridobject(valsgrid, 2, 1))
        valstext.posinframex = uiz_fill
        valstext.posinframey = uiz_fill
        valstext.text = "s"
        uiz_fixgeneralpos(valstext)

        valvtext = instance_create(0, 0, obj_uiZ_drawtext)
        uiz_setparent(valvtext, uiz_gridobject(valsgrid, 2, 2))
        valvtext.posinframex = uiz_fill
        valvtext.posinframey = uiz_fill
        valvtext.text = "v"
        uiz_fixgeneralpos(valvtext)

        valh = instance_create(0, 0, obj_uiZ_stringbox)
        uiz_setparent(valh, uiz_gridobject(valsgrid, 3, 0))
        valh.acceptOnlyNumbers = true;
        valh.acceptOnlyIntegers = true;
        valh.acceptOnlyPositive = true;
        valh.numberCounter_enable = true;
        valh.posinframex = uiz_fill
        valh.posinframey = uiz_center
        valh.posvalh = 0.3
        valh.posvalhtype = dp
        valh.minvalue = 0
        valh.maxvalue = 255
        valh.allowdec = 0
        uiz_stringbox_setvalue(valh, string(h))
        uiz_fixgeneralpos(valh)

        vals = instance_create(0, 0, obj_uiZ_stringbox)
        uiz_setparent(vals, uiz_gridobject(valsgrid, 3, 1))
        vals.acceptOnlyNumbers = true;
        vals.acceptOnlyIntegers = true;
        vals.acceptOnlyPositive = true;
        vals.numberCounter_enable = true;
        vals.posinframex = uiz_fill
        vals.posinframey = uiz_center
        vals.posvalh = 0.3
        vals.posvalhtype = dp
        vals.minvalue = 0
        vals.maxvalue = 255
        vals.allowdec = 0
        uiz_stringbox_setvalue(vals, string(s))
        uiz_fixgeneralpos(vals)

        valv = instance_create(0, 0, obj_uiZ_stringbox)
        uiz_setparent(valv, uiz_gridobject(valsgrid, 3, 2))
        valv.acceptOnlyNumbers = true;
        valv.acceptOnlyIntegers = true;
        valv.acceptOnlyPositive = true;
        valv.numberCounter_enable = true;
        valv.posinframex = uiz_fill
        valv.posinframey = uiz_center
        valv.posvalh = 0.3
        valv.posvalhtype = dp
        valv.minvalue = 0
        valv.maxvalue = 255
        valv.allowdec = 0
        uiz_stringbox_setvalue(valv, string(v))
        uiz_fixgeneralpos(valv)
        uiz_colorbox_updatergb(1, 1, 1, 0, 0)
        //*/
        //last fix
        uiz_fixchildren(w, 1)
        //c.color=value
        //uiz_colorbox_updatergb(1,1,1)
    }
}
if kmouseover &gt; 0 then {
    uiz_set_cursor(cr_handpoint)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_mouse_docheck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if uiz_cntn() then{
//draw back
draw_square(rx,ry,rlx,rly,value,1)

uiz_containend()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
