<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cross=noone
maxim=noone
minim=noone
global.lockwindowresel=global.lockwindowreseltime;
lastparent=obj_uiZ_controller.id;
//lastparent=0;
ro=0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 17
//#objectversion 1.0
//#exclude
//global.count=2
uiz_objinit()
draw=0
mark=1
markcolor=irandom(255*255*255)
//texturemode=uiz_texturemode_tile
//bordertexturemode=uiz_texturemode_fill
//bordercolor=c_white
iscover=0
fromx=0
fromy=0
tox=0
toy=0
topbordermargin=3;
rightbordermargin=3;
bottombordermargin=3;
leftbordermargin=3;
//bordersprite=spr_uiZ_windowborder;
//bordersprite=spr_uiZ_border1;
windowtext="window"//s//window text//
//drawwindowtext=""
windowtextcolor=c_black//c//window text color//
barsize=0.25
barsizevaltype=dp
//windowtopcolor=c_aqua
//windowtopalpha=1
//windowmaincolor=c_white
//windowmainalpha=1
button_cross=1
button_maximize=1
button_minimize=1
oldbutton_cross=1
oldbutton_maximize=1
oldbutton_minimize=1
addwindowdepth=0
mainframe=0
snaptomouse=1
mouseminx=0
mouseminy=0
windowminx=0
windowminy=0
sizestatus=1
oldx=x
oldy=y
olda=1
oldwidth=width
oldheight=height
//inanimation=0
selected=false;
maximizeanimation=uiz_elastic_inout
maximizeanimationspeed=0.3
unmaximizeanimation=uiz_elastic_inout
unmaximizeanimationspeed=0.2
minimizeanimation=uiz_wigle
minimizeanimationspeed=0.3
unminimizeanimation=uiz_wigle
unminimizeanimationspeed=0.2
destroyyfunction=uiz_straight
destroyxfunction=uiz_straight
destroyafunction=uiz_straight
destroyspeed=0.5
destroy=0
finaldestroy=0
destroycount=0
destroycountspeed=0.1
destroycountanimation=uiz_elastic_inout
contain=2
resizable=true;
halign=fa_left
valign=fa_center
font=-1;
wholewidthalign=false;
keepratio=false;

//lastparent=0;
if instance_exists(global.selectedwindow) and global.selectedwindow.depth&gt;-1000000 then{
global.selectedwindow=id;
}

isresizing=false;
doublemargins=false//b//double topbar margins//
topbackuse=-1;

hasbackground=true;
texturescript=uiz_back_circlestitch//i//texturescript//
texturescript_over=-1//i//texturescript over//
texturescript_in=-1//i//texturescript in//
texturescript_out=uiz_back_square//i//texturescript out//

sprite_normal=spr_uiZ_border1//p//sprite normal//
color_normal=c_white//c//color normal//
margin_normal=5//v//margin normal//
sprite_texturemode=uiz_texturemode_fill//t//texturemode normal
border_texturemode=-1//t//texturemode border//

sprite_over=spr_uiZ_border1_over//p//sprite over//
color_over=-1//c//color over//
margin_over=-1//v//margin over//

sprite_in=spr_uiZ_border1_in//p//sprite in//
color_in=-1//c//color in//
margin_in=-1//v//margin in//

sprite_out=spr_uiZ_border1_in//p//sprite out//
color_out=-1//c//color out//
margin_out=0//v//margin out//




top_texturescript=uiz_back_circlestitch//i//top texturescript//
top_texturescript_over=-1//i//top texturescript over//
top_texturescript_in=-1//i//top texturescript in//
top_texturescript_out=-1//i//top texturescript out//

top_sprite_normal=spr_uiZ_border1//p//top sprite normal//
top_color_normal=c_white//c//top color normal//
top_margin_normal=0//v//top margin normal//
top_sprite_texturemode=uiz_texturemode_fill//t//top texturemode normal
top_border_texturemode=-1//t//top texturemode border//

top_sprite_over=spr_uiZ_border1_over//p//top sprite over//
top_color_over=-1//c//top color over//
top_margin_over=-1//v//top margin over//

top_sprite_in=spr_uiZ_border1_in//p//top sprite in//
top_color_in=-1//c//top color in//
top_margin_in=-1//v//top margin in//

top_sprite_out=spr_uiZ_border1_in//p//top sprite out//
top_color_out=-1//c//top color out//
top_margin_out=-1//v//top margin out//
addwindowmydepth=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if lastparent!=parent then{
uiz_window_fixadddepth()
uiz_fixChildren(id,true)
lastparent=parent;
}
*/
var fix=false;
var fixforp=id;
//
//if global.mouseoverwindow=id and mouse_check_button(mb_left) and (sizestatus&lt;2 or global.lastmousemoved&gt;2 or snaptomouse=1) and isresizing=0 and (global.mouseoverobject=0 or (instance_exists(global.mouseoverobject) and uiz_hasParent_inChain(global.mouseoverobject,id))) then{
if global.lockwindowresel=0 and selected=false and global.mouseoverwindow=id and mouse_check_button(mb_left) and (sizestatus&lt;2 or global.lastmousemoved&gt;2 or snaptomouse=1) and isresizing=0 and (global.mouseover=obj_uiZ_controller.id or (instance_exists(global.mouseover) and uiz_hasParent_inChain(global.mouseover,id))) then{
//global.uiz_windows++
//fix=true;

//sdbm("called it 1",global.selectedwindow,id,object_get_name(global.selectedwindow.object_index),object_get_name(id.object_index))
uiz_window_fixadddepth()
//sdbm("called fixadddepth")
global.selectedwindow=id
uiz_updater_FixViews()
}
if (uiz_mouse_isonframe_pressingleft(topbar) or uiz_mouse_ison_pressingleft(buttons)) and global.selectedwindow=id and (sizestatus&lt;2 or global.lastmousemoved&gt;2 or snaptomouse=1) and isresizing=0 then{
//sdbm("isdoing"+string(irandom(50)))
if snaptomouse=0 and inanimation=0 then{

snaptomouse=1
global.mousefrozen=1
mouseminx=uiz_getmouse_x()
mouseminy=uiz_getmouse_y()
windowsminx=x
windowsminy=y
if sizestatus=2 then{
x=windowsminx+(uiz_getmouse_x()-mouseminx)
y=windowsminy+(uiz_getmouse_y()-mouseminy)
uiz_window_unmaximize()}
}
}else{
if snaptomouse=1 then{snaptomouse=0 global.mousefrozen=0}
}
if snaptomouse=1 then{
x=windowsminx+(uiz_getmouse_x()-mouseminx)
y=windowsminy+(uiz_getmouse_y()-mouseminy)
switch(contain){
case 1:
var py=uiz_getposy(barsize,barsizevaltype);
x=max(-width+py,x)
y=max(-height+py,y)
x=min(parent.width-py,x)
y=min(parent.height-py,y)
break;
case 2:
var py=uiz_getposy(barsize,barsizevaltype);
x=max(-width+py*4,x)
y=max(0,y)
x=min(parent.width-py,x)
y=min(parent.height-py,y)
break;
case 3:
x=max(0,x)
y=max(0,y)
x=min(parent.width-width,x)
y=min(parent.height-height,y)
break;
}
fix=true;
if inanimation&gt;0 then{
ro.tox=x
ro.toy=y
ro.fromx=x
ro.fromy=y
}
}
if fix=true then{uiz_fixwindowpos(fixforp);}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(inanimation) {
case 0:
if button_minimize=1 and minim.kmouseover=4 then{
uiz_window_switchminimize()
}
if button_maximize=1 and maxim.kmouseover=4 then{
uiz_window_switchmaximize()
}
if button_cross=1 and cross.kmouseover=4 then{
//uiz_destroyObject(id)
uiz_destroyObject_animation(id,destroyxfunction,destroyyfunction,destroyafunction,destroyspeed)
/*
//destroy=1
oldx=x
oldy=y
//oldwidth=width oldheight=height
*/

}
break;
case 1:
if ro.isdone=1 then{
inanimation=0
with(ro){instance_destroy()}}
break;
}
/*
if destroy=1 then{
if destroycount&gt;=1 then{uiz_destroyObject(id)}
var st=(1-uiz_animation_getFunction(destroycount,destroycountanimation));
width=st*oldwidth
height=st*oldheight
x=oldx+(oldwidth-width)/2
y=oldy+(oldheight-height)/2
destroycount+=destroycountspeed
if destroycount&gt;=1 then{finaldestroy=1}
uiz_fixwindowpos(id)
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check mouse and rescale window
kmouseover=uiz_mouse_isonframe_leftcheck(id)
//sdbm(isresizing)


if global.mousefrozen=0 and resizable=1 and kmouseover=1 and snaptomouse=0 then{
if (uiz_getmouse_x()&lt;rx or uiz_getmouse_y()&lt;ry or uiz_getmouse_x()&gt;rlx or uiz_getmouse_y()&gt;rly) then{
//sdbm("executing layer 2")
//check right bottom
if (uiz_getmouse_x()&gt;rlx-20 and uiz_getmouse_y()&gt;rly-20) then{
//right bottom

uiz_set_cursor(cr_size_nwse);
}else{
//check left bottom
if (uiz_getmouse_x()&lt;rx+20 and uiz_getmouse_y()&gt;rly-20) then{
//left bottom
uiz_set_cursor(cr_size_nesw);
}else{
//check left top
if (uiz_getmouse_x()&lt;rx+20 and uiz_getmouse_y()&lt;ry+20) then{
//left top
uiz_set_cursor(cr_size_nwse);
}else{
//check right top
if (uiz_getmouse_x()&gt;rlx-20 and uiz_getmouse_y()&lt;ry+20) then{
//left top
uiz_set_cursor(cr_size_nesw);
}else{
//check top
if (uiz_getmouse_y()&lt;ry-1) then{
//top
uiz_set_cursor(cr_size_ns);
}else{
//check bottom
if (uiz_getmouse_y()&gt;rly+1) then{
//bottom
uiz_set_cursor(cr_size_ns);
}else{
//check left
if (uiz_getmouse_x()&lt;rx-1) then{
//left
uiz_set_cursor(cr_size_we);
}else{
//check bottom
if (uiz_getmouse_x()&gt;rlx+1) then{
//bottom
uiz_set_cursor(cr_size_we);
}}}}}}}}}

}
if global.mousefrozen=0 and resizable=1 and kmouseover=3 and snaptomouse=0 then{
if (uiz_getmouse_x()&lt;rx or uiz_getmouse_y()&lt;ry or uiz_getmouse_x()&gt;rlx or uiz_getmouse_y()&gt;rly) then{
//sdbm("executing layer 2")
//check right bottom
if (uiz_getmouse_x()&gt;rlx-20 and uiz_getmouse_y()&gt;rly-20) then{
//right bottom
isresizing=1;
uiz_set_cursor(cr_size_nwse);
global.mousefrozen=true;
}else{
//check left bottom
if (uiz_getmouse_x()&lt;rx+20 and uiz_getmouse_y()&gt;rly-20) then{
//left bottom
isresizing=2;
uiz_set_cursor(cr_size_nesw);
global.mousefrozen=true;
}else{
//check left top
if (uiz_getmouse_x()&lt;rx+20 and uiz_getmouse_y()&lt;ry+20) then{
//left top
isresizing=3;
uiz_set_cursor(cr_size_nwse);
global.mousefrozen=true;
}else{
//check right top
if (uiz_getmouse_x()&gt;rlx-20 and uiz_getmouse_y()&lt;ry+20) then{
//right top
isresizing=4;
uiz_set_cursor(cr_size_nesw);
global.mousefrozen=true;
}else{
//check top
if (uiz_getmouse_y()&lt;ry-1) then{
//top
isresizing=5;
uiz_set_cursor(cr_size_ns);
global.mousefrozen=true;
}else{
//check bottom
if (uiz_getmouse_y()&gt;rly+1) then{
//bottom
isresizing=6;
uiz_set_cursor(cr_size_ns);
global.mousefrozen=true;
}else{
//check left
if (uiz_getmouse_x()&lt;rx-1) then{
//left
isresizing=7;
uiz_set_cursor(cr_size_we);
global.mousefrozen=true;
}else{
//check bottom
if (uiz_getmouse_x()&gt;rlx+1) then{
//bottom
isresizing=8;
uiz_set_cursor(cr_size_we);
global.mousefrozen=true;
}}}}}}}}}
}

if (mouse_check_button(mb_none) or !mouse_check_button(mb_left) or mouse_check_button_released(mb_any)) and isresizing&gt;0 then{
//uiz_set_cursor(cr_default);
isresizing=0;
global.mousefrozen=false;
}







//if resizable=1 and (kmouseover&gt;1 or (isresizing=true and (mouse_check_button(mb_left) or mouse_check_button_pressed(mb_left)))) then{

if resizable=1 and isresizing&gt;0 then{
if keepratio=true then{
//var pxmovedx=(global.lastmousemovedx+global.lastmousemovedy)/2
var pxmovedx=uiz_pyth(global.lastmousemovedx,global.lastmousemovedy)
var ratio=width/height;
var pxmovedy=pxmovedx/ratio
}
switch(isresizing){
case 1: 
//right bottom
uiz_set_cursor(cr_size_nwse);
if keepratio=true then{
//check if moving forward or backwards
pxmovedx*=uiz_sign(global.lastmousemovedx+global.lastmousemovedy)
width=clamp(width-pxmovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth-x);
height=width/ratio
}else{
width=clamp(width-global.lastmousemovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth-x);
height=clamp(height-global.lastmousemovedy,uiz_getposx(barsize,barsizevaltype)+1,global.screenpxheight);
}
uiz_fixwindowpos(id)
break;
case 2: 
//left bottom
uiz_set_cursor(cr_size_nesw);
var oldwidth=width;
if keepratio=true then{
pxmovedx*=uiz_sign(global.lastmousemovedx-global.lastmousemovedy)
width=clamp(width+pxmovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth-x);
height=width/ratio
}else{
width=clamp(width+global.lastmousemovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth);
height=clamp(height-global.lastmousemovedy,uiz_getposx(barsize,barsizevaltype)+1,global.screenpxheight);
}
x+=oldwidth-width
uiz_fixwindowpos(id)
break;
case 3:
//left top
uiz_set_cursor(cr_size_nwse);
var oldwidth=width;
var oldheight=height
if keepratio=true then{
pxmovedx*=uiz_sign(global.lastmousemovedx+global.lastmousemovedy)
width=clamp(width+pxmovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth-x);
height=width/ratio
}else{
width=clamp(width+global.lastmousemovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth);
height=clamp(height+global.lastmousemovedy,uiz_getposx(barsize,barsizevaltype)+1,global.screenpxheight);
}
x+=oldwidth-width
y+=oldheight-height
uiz_fixwindowpos(id)
break;
case 4:
//right top
uiz_set_cursor(cr_size_nesw);
var oldheight=height
if keepratio=true then{
pxmovedx*=uiz_sign(global.lastmousemovedx-global.lastmousemovedy)
width=clamp(width-pxmovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth-x);
height=width/ratio
}else{
width=clamp(width-global.lastmousemovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth-x);
height=clamp(height+global.lastmousemovedy,uiz_getposx(barsize,barsizevaltype)+1,global.screenpxheight);
}
y+=oldheight-height
uiz_fixwindowpos(id)
break;
case 5:
//check top
uiz_set_cursor(cr_size_ns);
global.mousefrozen=true;
var oldheight=height
if keepratio=true then{
pxmovedy*=uiz_sign(global.lastmousemovedy)
height=clamp(height+pxmovedy,uiz_getposx(barsize,barsizevaltype)+1,global.screenpxheight);
width=height*ratio
}else{
height=clamp(height+global.lastmousemovedy,uiz_getposx(barsize,barsizevaltype)+1,global.screenpxheight);
}
y+=oldheight-height
uiz_fixwindowpos(id)
break;
case 6:
//bottom
uiz_set_cursor(cr_size_ns);
if keepratio=true then{
pxmovedy*=uiz_sign(global.lastmousemovedy)
height=clamp(height-pxmovedy,uiz_getposx(barsize,barsizevaltype)+1,global.screenpxheight);
width=height*ratio
}else{
height=clamp(height-global.lastmousemovedy,uiz_getposx(barsize,barsizevaltype)+1,global.screenpxheight);
}
uiz_fixwindowpos(id)
break;
case 7:
//left
uiz_set_cursor(cr_size_we);
var oldwidth=width;
if keepratio=true then{
pxmovedx*=uiz_sign(global.lastmousemovedx)
width=clamp(width+pxmovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth-x);
height=width/ratio
}else{
width=clamp(width+global.lastmousemovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth);
}
x+=oldwidth-width
uiz_fixwindowpos(id)
break;
case 8:
//right
uiz_set_cursor(cr_size_we);
if keepratio=true then{
pxmovedx*=uiz_sign(global.lastmousemovedx)
width=clamp(width-pxmovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth-x);
height=width/ratio
}else{
width=clamp(width-global.lastmousemovedx,uiz_getposx(barsize,barsizevaltype)*4,global.screenpxwidth-x);
}
uiz_fixwindowpos(id)
break;
}
//check for minimization
if width&lt;=uiz_getposx(barsize,barsizevaltype)*4 and height&lt;=uiz_getposx(barsize,barsizevaltype)+1 then{
//minimum size
sizestatus=0;
}else{
//bigger than miminum size
if sizestatus=0 then{sizestatus=1}
if width&gt;=global.screenpxwidth and height&gt;=global.screenpxheight then{
//maximum size
sizestatus=2;
}else{
//smaller than maximum size
if sizestatus=2 then{sizestatus=1;}
}
}
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//uiz_updater_FixViews()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_compatibility_mouse_docheck_window();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if uiz_cntn_margin() then{
/*
if uiz_cntn() then{
draw_square(rx,ry,rlx,ry+uiz_getposx(barsize,barsizevaltype),windowtopcolor,windowtopalpha*alpha)
draw_square(rx,ry+uiz_getposx(barsize,barsizevaltype),rlx,rly,windowmaincolor,windowmainalpha*alpha)
draw_set_alpha(alpha)
//draw the edge bar
if bordersprite!=0 then{

draw_set_color(bordercolor)
//draw_rectangle(rx,ry,rlx,rly,0)
//draw_sprite_part(sprite,0,0,0,width,height,rx,ry)
var nwidth=width//-leftbordermargin-rightbordermargin;
var nheight=height//-topbordermargin-bottombordermargin;
var nrx=rx//+leftbordermargin;
var nry=ry//+topbordermargin;
var nrlx=rlx//-rightbordermargin;
var nrly=rly//-bottombordermargin;
var nsw=sprite_get_width(bordersprite)
var nsh=sprite_get_height(bordersprite)
switch(bordertexturemode){
case uiz_texturemode_fill:
var szx=1
var szy=1
break;
case uiz_texturemode_tile:
var szx=nwidth/nsw
var szy=nheight/nsh
break;
case uiz_texturemode_tilefit:
var szx=round(nwidth/nsw);
var szy=round(nheight/nsh);
break;
default:
szx=1
szy=1
}
texture_set_repeat(0)

/*middle
draw_primitive_begin_texture(pr_trianglestrip,sprite_get_texture(bordersprite,0))
draw_vertex_texture(nrx,nry,0,0)
draw_vertex_texture(nrx,nrly,0,szy)
draw_vertex_texture(nrlx,nry,szx,0)
draw_vertex_texture(nrlx,nrly,szx,szy)
draw_primitive_end()*/
/*
//top
draw_primitive_begin_texture(pr_trianglestrip,sprite_get_texture(bordersprite,0))
draw_vertex_texture(nrx,nry-nsh,0,0)
draw_vertex_texture(nrx,nry,0,1)
draw_vertex_texture(nrlx,nry-nsh,szx,0)
draw_vertex_texture(nrlx,nry,szx,1)
draw_primitive_end()
//bottom
draw_primitive_begin_texture(pr_trianglestrip,sprite_get_texture(bordersprite,2))
draw_vertex_texture(nrx,nrly,0,0)
draw_vertex_texture(nrx,nrly+nsh,0,1)
draw_vertex_texture(nrlx,nrly,szx,0)
draw_vertex_texture(nrlx,nrly+nsh,szx,1)
draw_primitive_end()
//right
draw_primitive_begin_texture(pr_trianglestrip,sprite_get_texture(bordersprite,1))
draw_vertex_texture(nrlx,nry,0,0)
draw_vertex_texture(nrlx,nrly,0,szy)
draw_vertex_texture(nrlx+nsw,nry,1,0)
draw_vertex_texture(nrlx+nsw,nrly,1,szy)
draw_primitive_end()
//left
draw_primitive_begin_texture(pr_trianglestrip,sprite_get_texture(bordersprite,3))
draw_vertex_texture(nrx-nsw,nry,0,0)
draw_vertex_texture(nrx-nsw,nrly,0,szy)
draw_vertex_texture(nrx,nry,1,0)
draw_vertex_texture(nrx,nrly,1,szy)
draw_primitive_end()

//top-left
draw_sprite(bordersprite,4,nrx-nsw,nry-nsh)
//top right
draw_sprite(bordersprite,5,nrlx,nry-nsh)
//bottom right
draw_sprite(bordersprite,6,nrlx,nrly)
//bottom left
draw_sprite(bordersprite,7,nrx-nsw,nrly)



}


uiz_containend()
}
draw_set_color(windowtextcolor)
draw_set_alpha(alpha)
with(topbar){
draw_set_valign(fa_middle)
draw_text(rx+3,ry+height/2,uiz_gettext_contained(parent.parent.parent.parent.windowtext,width))
}

draw_set_valign(fa_top)
//draw_text(0,0,"UPDATENEXTSTEP: "+string(updatenextstep))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//dbm("exec1")
//if keyboard_check(ord("1"))
if uiz_cntn(){
//dbm("exec2")
if global.selectedwindow=id then{selected=1}else{selected=0;}
if sizestatus=2 then{
var u=selected*2+1;
}else{
var u=selected*2;
}

var m=margin_normal;
switch(u){
case 1:
if margin_over&gt;-1 then{m=margin_over;}
break;
case 2:
if margin_in&gt;-1 then{m=margin_in;}
break;
case 3:
if margin_out&gt;-1 then{m=margin_out;}
break;
}
//sdbm("exec uiz_back_margins")
//uiz_back_margin(m,u);
uiz_back(u)


//sdbm("usis",u)
if topbackuse&gt;-1 then{u=topbackuse}
with(h2){
texturescript=other.top_texturescript
texturescript_over=other.top_texturescript_over;
texturescript_in=other.top_texturescript_in;
texturescript_out=other.top_texturescript_out;
sprite_normal=other.top_sprite_normal
color_normal=other.top_color_normal
margin_normal=other.top_margin_normal
sprite_texturemode=other.top_sprite_texturemode
border_texturemode=other.top_border_texturemode

sprite_over=other.top_sprite_over
color_over=other.top_color_over
margin_over=other.top_margin_over

sprite_in=other.top_sprite_in
color_in=other.top_color_in
margin_in=other.top_margin_in

sprite_out=other.top_sprite_out
color_out=other.top_color_out
margin_out=other.top_margin_out
if other.doublemargins=true then{
//uiz_back_margin(-other.margin_normal,u);
uiz_back(u)
}else{
//sdbm("ahau",u,color_normal)
uiz_back(u)
}
}
if font&gt;-1 then{draw_set_font(font)}
draw_set_color(windowtextcolor)
draw_set_alpha(alpha)
with(topbar){
//draw_set_valign(fa_middle)
//draw_text(rx+3,ry+height/2,uiz_gettext_contained(parent.parent.parent.parent.windowtext,width))
draw_set_valign(other.valign)
draw_set_halign(other.halign)
//draw_text(rx+width*(halign/2),ry+height*(valign/2),uiz_gettext_contained(parent.parent.parent.parent.windowtext,width))

if other.wholewidthalign=false then{
draw_text(rx+width*(other.halign/2),ry+height*(other.valign/2),uiz_gettext_contained(other.windowtext,width))
}else{
draw_text(rx+parent.width*(other.halign/2),ry+height*(other.valign/2),uiz_gettext_contained(other.windowtext,width))
}

}

uiz_containend()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
