<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 3
//#objectversion 1.0
uiz_objinit()
draw=0
mark=false//b//mark
debugmark=false//b//debugmark
//mark=true
//deugmark=true
markcolor=irandom(255*255*255)
iscover=0
fromx=0
fromy=0
tox=0
toy=0
minsizeinframeset=0
minsizeinframesetvaltype=px
maxsizeinframeset=0
maxsizeinframesetvaltype=px
framesetbar=0//added because else it wouldn't work
inlistpos=0
snaptoparent=1
scrolly=false//b//scroll y//
scrollyspeed=30//v//scroll y speed//
scrollx=false//b//scroll x//
scrollxspeed=30//v//scroll x speed//
snapm=false;
snapk=false;
snapx=0;
snapy=0;
scrollbarsprite=spr_uiZ_scrollbar//p//sprite//
scrollbarcolor=c_white//c//color//
scrollbarbacktexturemode=uiz_texturemode_fill//t//texturemode//
scrollbarsize=0.2//v//scrollbar size//
scrollbarsizetype=dp//v//scrollbar size type//
scrollbary=!global.systemsupportstouch//b//auto vertical scrollbar//
scrollbarx=!global.systemsupportstouch//b//auto horizontal scrollbar//
autoupdatescrolly=false//b//auto update vertical scrollbar//
autoupdatescrollx=false//b//auto update horizontal scrollbar//
uscrolly=-1;
uscrollx=-1;
mscrollbary=0;
mscrollbarx=0;
wasrlx=rlx
wasrly=rly
waswidth=width
washeight=height
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
///#define uiZ
//#sprite images
//#spritenum 3
width=0
height=0
lx=x+width
ly=y+height
//parent=obj_uiZ_controller
children=-1
listpos=-10
uiz_initparent()
rx=parent.rx+x
ry=parent.ry+y
rlx=parent.rx+lx
rly=parent.ry+ly
snaptoparent=1
//draw=0
//mark=0
//markcolor=c_black
draw=1
mark=1
markcolor=irandom(255*255*255)
//setup list
//children=ds_list_create()
adddepth=0
inlistpos=0
iscover=0
fromx=0
fromy=0
tox=0
toy=0
topbordermargin=0;
rightbordermargin=0;
bottombordermargin=0;
leftbordermargin=0;
topframemargin=0;
rightframemargin=0;
bottomframemargin=0;
leftframemargin=0;
posinframex=uiz_static
posinframey=uiz_static
setpointy=uiz_auto
setpointx=uiz_auto
inframe=0
addx=0
addy=0
containframe=-1
containin=0
containtowhosparent=0
minsizeinframeset=0
minsizeinframesetvaltype=px
maxsizeinframeset=0
maxsizeinframesetvaltype=px
framesetbar=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if ds_exists(children,ds_type_list) then{ds_list_destroy(children)}
//if surface_exists(containframe) then{surface_free(containframe)}
uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var krlx=rlx;
var krly=rly;
var kw=width;
var kh=height;
rlx=wasrlx;
rly=wasrly;
width=waswidth;
height=washeight;
uiz_beginstep()
rlx=krlx;
rly=krly;
width=kw;
height=kh;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
///scroll

//kmouseover=uiz_mouse_isonframe_leftcheck(id)
//if scrolly=true and kmouseover&gt;0 then{
//sdbm(kmouseover)
//sdbm("checking",global.mouseoverscrollframe,id)
var cy=false;
var cx=false;


if scrolly=true or scrollx=true or snapm=true then{


if autoupdatescrollx then{
mscrollbarx=-uiz_getmaxxscrollinframe(id);
mscrollbarx=0; mscrollbarx=-uiz_getmaxxscrollinframe(id) 
if addx&lt;mscrollbarx then{
cx=true;
/*addx=clamp(addx,mscrollbarx,0)*//*
addx=min(max(addx,mscrollbarx),0)} 
if mscrollbarx&lt;0 and scrollbarx=true and wasrly=rly then{
var sgm=max(0,min(uiz_getposy_self(scrollbarsize,scrollbarsizetype),height-2)); 
height=floor(height-sgm);
rly=floor(rly-sgm);
ouscrollx=uscrollx;
uscrollx=uiz_drawscrollbar_horizontal_step(rx,krly,minny,rly,scrollbarsprite,scrollbarcolor,scrollbarbacktexturemode,uscrollx,-mscrollbarx,false,scrollxspeed)
if ouscrollx!=uscrolly then{
uiz_updater_FixViews()
}
}else{if mscrollbarx=0 then{rly=wasrly; height=washeight;}}}


if autoupdatescrolly then{
mscrollbary=-uiz_getmaxyscrollinframe(id);
mscrollbary=0; mscrollbary=-uiz_getmaxyscrollinframe(id) 
if addy&lt;mscrollbary then{
cy=true; /*addy=clamp(addy,mscrollbary,0)*//*
addx=min(max(addx,mscrollbarx),0)} 
//sdbm(mscrollbary,scrollbary)
if mscrollbary&lt;0 and scrollbary=true and wasrlx=rlx then{
var sgm=max(0,min(uiz_getposx_self(scrollbarsize,scrollbarsizetype),width-2)); 
rlx=floor(rlx-sgm); 
width=floor(width-sgm)}else{if mscrollbary=0 then{rlx=wasrlx; width=waswidth}}}
}


if global.mouseoverscrollframe=id and snapm=false then{
if scrolly=true then{
if mouse_wheel_up() then{addy+=scrollyspeed; cy=true; }
if mouse_wheel_down() then{addy-=scrollyspeed cy=true;}
}else{

if scrollx=true then{
if mouse_wheel_up() then{addx+=scrollyspeed; cx=true;}
if mouse_wheel_down() then{addx-=scrollyspeed cx=true;}
}
}
if (scrolly=true or scrollx=true) and mouse_check_button_pressed(mb_middle) then{
snapm=true;
snapx=uiz_getmouse_x()
snapy=uiz_getmouse_y()
global.mousefrozen=true
}
if global.mousefrozen=false and snapm=false and uscrolly&lt;0 and uscrollx&lt;0 and (scrolly=true or scrollx=true) and mouse_check_button(mb_left) and global.lastsecondmousemoved&gt;global.mousemovetoscroll then{
snapk=true;
snapx=uiz_getmouse_x()
snapy=uiz_getmouse_y()
global.mousefrozen=true
}


}


if snapk=true then{
if (scrolly=false and scrollx=false) or !mouse_check_button(mb_left) or uscrolly&gt;=0 then{
snapk=false;
global.mousefrozen=0;
}
if scrolly=true then{
addy-=global.lastmousemovedy;
//sdbm("addy3",addy)
cy=true;
}
if scrollx=true then{
addx-=global.lastmousemovedx;
cx=true;
}
}


if snapm=true then{
if ((scrolly=false and scrollx=false) or !mouse_check_button(mb_middle)) then{
snapm=false;
global.mousefrozen=0;
}

uiz_set_cursor(cr_size_all)

if scrolly=true then{
var sped=snapy-uiz_getmouse_y();
addy+=sped;
//sdbm("addy4",addy)
//sdbm(mscrollbarx)
cy=true;
}

if scrollx=true then{
var sped=snapx-uiz_getmouse_x();
addx+=sped;
//sdbm(mscrollbarx)
cx=true;
}

}


if cx=true then{
addx=clamp(addx,mscrollbarx,0)}
if cy=true then{
addy=clamp(addy,mscrollbary,0)
//sdbm("addy5",addy)
}
if cx=true or cy=true then{
//sdbm("resetchildren",addy)
uiz_fixChildren(id,true)}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if mark=1 and uiz_hasparentinchain(id,100035) then{
//if keyboard_check(ord("2")) then{
if debugmark=1 then{
draw_set_alpha(0.5)
//draw_set_alpha(1)
if global.mouseover=id then{draw_set_color(c_white)}else{
draw_set_color(markcolor)}
draw_rectangle(rx,ry,rlx-1,rly-1,0)
//sdbm("eec")
draw_set_color(c_black)
draw_text(rx+10,ry+10,id)
draw_set_alpha(1)
}
uiz_drawshadow_roundrect()
var krlx=rlx;
var krly=rly;
var kw=width;
var kh=height
rlx=wasrlx;
rly=wasrly;
width=waswidth;
height=washeight;
var upd=false;
if uiz_cntn() then{
if mark=true then{
draw_square(rx,ry,rlx,rly,markcolor,alpha)
}
if scrolly=true and scrollbary=true and mscrollbary&lt;0 then{
//sdbm(krlx,ry,rlx,rly)
if uscrolly&gt;=0 then{
uscrolly=uiz_positify(addy-1)
}else{
uscrolly=addy-1
}
var minny;
if scrollbarx=true and mscrollbarx&lt;0 then{minny=krly}else{minny=rly}
//sdbm("hi")

uscrolly=uiz_drawscrollbar_vertical(krlx,ry,rlx,minny,scrollbarsprite,scrollbarcolor,scrollbarbacktexturemode,uscrolly,-mscrollbary,false,scrollyspeed)

var oaddy=addy;
addy=min(-uiz_positify(uscrolly),0)
if oaddy!=addy then{upd=true}

}
if scrollx=true and scrollbarx=true and mscrollbarx&lt;0 then{
//sdbm(krlx,ry,rlx,rly)
if uscrollx&gt;=0 then{
uscrollx=uiz_positify(addx-1)
}else{
uscrollx=addx-1
}
if scrollbary=true and mscrollbary&lt;0 then{minny=krlx}else{minny=rlx}
//uiz_drawscrollbar_horizontal_draw(rx,krly,minny,rly,scrollbarsprite,scrollbarcolor,scrollbarbacktexturemode,uscrollx,-mscrollbarx,false,scrollxspeed)
var oaddx=addx;
addx=min(-uiz_positify(uscrollx),0)
if oaddx!=addx then{upd=true}
}
uiz_containend()
}
rlx=krlx;
rly=krly;
width=kw;
height=kh;
if upd=true then{uiz_fixChildren(id,true)}
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if ds_exists(children,ds_type_list) then{ds_list_destroy(children)}
//if surface_exists(containframe) then{surface_free(containframe)}
uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if ds_exists(children,ds_type_list) then{ds_list_destroy(children)}
//if surface_exists(containframe) then{surface_free(containframe)}
uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if snapm=true then{draw_square(snapx-3,snapy-3,snapx+3,snapy+3,c_red,1)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
