<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 24
//#objectversion 1.0
uiz_objinit()
font=-1//f//font//
textcolor=c_black//c//text color//
selecttextcolor=c_white//c//selection text color//
selectbackcolor=c_blue//c//selection background color//

scrollbarsize=0.2//v//scrollbarsize//
scrollbarsizetype=dp//z//scrollbarsizetype//
scrollbarsprite=spr_uiZ_scrollbar//p//sprite//
scrollbarcolor=c_white//c//color//
scrollbartexturemode=uiz_texturemode_fill_edgeless//t//texturemode//

scrollspeed=1//v//scrollspeed//


accountspeed=1//v//rapid mode count time//
accbetween=0.000001//v//rapid mode speed//

typeanimationin=uiz_exponential_in//a//type animation in//
typeanimationout=uiz_exponential_in//a//type animation out//
countspeed=1//v//type animation time//
count=0;
typecolor=c_black//c//type indicater color//
cursorwidth=3//c//type indicater thickness//


hasbackground=true;
texturescript=uiz_back_circlestitch//i//texturescript//
texturescript_over=-1//i//texturescript over//
texturescript_in=-1//i//texturescript in//
texturescript_out=-1//i//texturescript out//

sprite_normal=spr_uiZ_border1//p//sprite normal//
color_normal=c_white//c//color normal//
margin_normal=5//v//margin normal//
sprite_texturemode=uiz_texturemode_fill//t//texturemode normal
border_texturemode=-1//t//texturemode border//

sprite_over=spr_uiZ_border1_over//p//sprite over//
color_over=-1//c//color over//
margin_over=-1//v//margin over//

sprite_in=spr_uiZ_border1_in//p//sprite in//
color_in=-1//c//color in//
margin_in=-1//v//margin in//

sprite_out=spr_uiZ_border1_in//p//sprite out//
color_out=-1//c//color out//
margin_out=-1//v//margin out//
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>textList = ds_list_create();
fontHeight=string_height("{|}");

doscroll=false;
scroll=-1;
scrolllines=0;
scblwidth=0;
listFromPx=0;


//isTyping and hasSelection should never be true at the same time. If that's the case it should be considered a bug.
isTyping=false;
hasSelection=false;

hasMousePressed=false;
redoSelection=false;

selection1Line=-1;
selection1X=-1;
selection1Char=-1;

selection2Line=-1;
selection2X=-1;
selection2Char=-1;

selectionMinLine=selection1Line;
selectionMinX=selection1X;
selectionMinChar=selection1Char;

selectionMaxLine=selection2Line;
selectionMaxX=selection2X;
selectionMaxChar=selection2Char;

last_selectionMinLine=selectionMinLine;
last_selectionMinChar=selectionMinChar;

last_selectionMaxLine=selectionMaxLine;
last_selectionMaxChar=selectionMaxChar;

lastReworkAvWidth = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_textarea_end();
uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if doscroll=true then{
    scroll = uiz_drawscrollbar_vertical_step(ilx-scblwidth,iy,ilx,ily,scroll,scrolllines,true,scrollspeed);
    var oldListFrom = listFromPx;
    listFromPx=uiz_drawscrollbar_getscrollvalue(scroll);
    if oldListFrom!=listFromPx then{
        uiz_updater_FixViews_inside();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle selections
//get current mouse position
if kmouseover&gt;=uiz_mouseclick &amp;&amp; (doscroll=false or uiz_getmouse_x()&lt;ilx-scblwidth) then{

    uiz_mouse_freeze();
    var selectionCLine=-1;
    var selectionCX=-1;
    var selectionCChar=-1;
    
    
    var lsz = ds_list_size(textList);
    if lsz=0 then{
                exit;
    }
    selectionCLine=floor((uiz_getmouse_y()-iy-listFromPx)/fontHeight);
    if selectionCLine &gt;=lsz then{
        selectionCLine=lsz-1;
        selectionCChar = string_length(textList[| selectionCLine]);
        selectionCX = string_width(textList[| selectionCLine])
    }else{
        if selectionCLine&lt;0 then{
            selectionCLine=0;
            selectionCChar = string_length(textList[| 0]);
            selectionCX = string_width(textList[| 0])
        }else{
            var testLine = textList[| selectionCLine];
            var testLineSz = string_length(testLine);
            var curX=ix;
            var mouseX = uiz_getmouse_x();
            
            for(var i=1;i&lt;=testLineSz;i++){
                var w = string_width(string_char_at(testLine,i));
                if curX+w/2&gt;mouseX then{//when this mouse is further selected beyond this character
                    selectionCChar=i-1;
                    selectionCX=curX;
                    break;
                }
                curX+=w;
            }
            
            if (i&gt;testLineSz){//loop was looped fully, so no selection position was found, just assume the last character then.
                selectionCChar=testLineSz;
                selectionCX=curX;
            }
            }
    }
    
    //handle the newly gotten selection point
    var hadSelection = hasSelection;
    if mouse_check_button_pressed(mb_left)  then{
        hasMousePressed=true;
        selection1Line=selectionCLine;
        selection1X=selectionCX;
        selection1Char=selectionCChar;
    }
        selection2Line=selectionCLine;
        selection2X=selectionCX;
        selection2Char=selectionCChar;
        
        if uiz_textarea_selectionAreTheSame(){//check type/selection state
            hasSelection=false;
            if !mouse_check_button(mb_left) then{
                isTyping=true;
            }
        }else{
            isTyping=false;
            hasSelection=true;
        }
        if !mouse_check_button(mb_left) then{
            uiz_mouse_unfreeze();
            //hasMousePressed=false;
        }
        
        if hasSelection or hadSelection then{
            uiz_textarea_saveMinMaxSnapshot()
        }
        uiz_textarea_genMinMax();
        if (hasSelection or hadSelection) and uiz_textarea_hasMinMaxChangedSinceSnapshot() then{//update view
            uiz_updater_FixViews_area_selfmarked(ix,iy+fontHeight*min(last_selectionMinLine,selectionMinLine)-listFromPx,ilx,iy+fontHeight*(max(last_selectionMaxLine,selectionMaxLine)+1)-listFromPx);
        }
        
    
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_mouse_docheck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if uiz_cntn() then{
sdbm("Drawing textarea");
//draw background
uiz_back()

//setup text settings
draw_set_valign(fa_top)
draw_set_halign(fa_left)

//set style
if font&gt;-1 then{draw_set_font(font);}
draw_set_color(textcolor);


//get what lines should be drawn
var listLen = ds_list_size(textList);

if redoSelection=true and hasSelection=true then{
    var listFrom = max(min(last_selectionMinLine,selectionMinLine),listFromPx/fontHeight);
    var listTo = min(max(last_selectionMaxLine,selectionMaxLine),listFrom+iheight/fontHeight);
}else{
    var listFrom = (listFromPx/fontHeight);
    var listTo = min(listLen,listFrom+iheight/fontHeight);
}

var listFromFloor = floor(listFrom);
var listFromCeil = ceil(listFrom);
var listToFloor = floor(listTo);
var listToCeil = ceil(listTo);

redoSelection=false;

//draw selection background on full lines
if(selectionMaxLine-selectionMinLine&gt;1){
    draw_square(ix,iy+fontHeight*(selectionMinLine+1)-listFromPx,ilx,iy+fontHeight*(selectionMaxLine)-listFromPx,selectbackcolor,1);
}


//acutally draw the lines
if listFromFloor!=listFrom &amp;&amp; (listFrom-listFromFloor&lt;0.5) then{
    draw_text(ix,iy,textList[| listFromFloor]);    
}

draw_set_color(textcolor);
for(var i=listFromCeil;i&lt;listToFloor;i++){
    var lineY = iy+fontHeight*i-listFromPx;
    if i&gt;=selectionMinLine &amp;&amp; i&lt;=selectionMaxLine then{
        if i=selectionMinLine &amp;&amp; i=selectionMaxLine then{
        sdbm("drawing shit maxmin");
            //draw surrounding selection
            draw_text(ix,lineY,string_copy(textList[| i],1,selectionMinChar));
            draw_text(selectionMaxX,lineY,string_copy(textList[| i],selectionMaxChar+1,string_length(textList[|i]))); 
            //draw selecion itself
            draw_square(selectionMinX,lineY,selectionMaxX,lineY+fontHeight,selectbackcolor,1);
            draw_set_color(selecttextcolor);
            draw_text(selectionMinX,lineY,string_copy(textList[| i],selectionMinChar+1,selectionMaxChar-selectionMinChar)); 
            draw_set_color(textcolor);
            continue;
        }
        if i=selectionMinLine then{
        sdbm("drawing shit min");
            //draw surrounding selection
            draw_text(ix,lineY,string_copy(textList[| i],1,selectionMinChar));
            //draw selection itself
            draw_square(selectionMinX,lineY,ilx,lineY+fontHeight,selectbackcolor,1);
            draw_set_color(selecttextcolor);
            draw_text(selectionMinX,lineY,string_copy(textList[| i],selectionMinChar+1,string_length(textList[| i])-selectionMinChar)); 
            continue;
        }
        
        if i=selectionMaxLine then{
        sdbm("drawing shit max");
            //draw selection itself
            draw_square(ix,lineY,selectionMaxX,lineY+fontHeight,selectbackcolor,1);
            draw_set_color(selecttextcolor);
            draw_text(ix,lineY,string_copy(textList[| i],1,selectionMaxChar)); 
            draw_set_color(textcolor);
            //draw surrounding selection
            draw_text(selectionMaxX,lineY,string_copy(textList[| i],selectionMaxChar+1,string_length(textList[|i]))); 
            continue;
        }
           //we came here so we have fully selected line, just draw the text outside this if. 
        }
        
    
    draw_text(ix,lineY,textList[| i]); 

       
    
}

draw_set_valign(fa_bottom);
if listTo!=listToFloor &amp;&amp; (listTo-listToFloor&gt;0.5) then{
    draw_text(ix,ily,textList[| listToFloor]);
}

//draw scrollbar
if doscroll=true then{
uiz_drawscrollbar_vertical_draw(ilx-scblwidth,iy,ilx,ily,scrollbarsprite,scrollbarcolor,scrollbartexturemode,scroll,scrolllines)
}

uiz_containend()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_textarea_end();
uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_textarea_end();
uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_square(100,100,500,1000,c_gray,0.7);
draw_set_alpha(1);
//draw_set_color(c_green)
//draw_rectangle(ix+posx,iy,ix+posx+extraLineWidth+10,iy+10,false)
draw_set_color(c_black)


var h=100;

draw_text(100,h,"list size: "+string(ds_list_size(textList)));
h+=string_height("1")+10;
draw_text(100,h,"scroll: "+string(scroll));
h+=string_height("1")+10;

draw_text(100,h,"selection1Line: "+string(selection1Line));
h+=string_height("1")+10;
draw_text(100,h,"selection1X: "+string(selection1X));
h+=string_height("1")+10;
draw_text(100,h,"selection1Char: "+string(selection1Char));
h+=string_height("1")+10;

draw_text(100,h,"selectionMinLine: "+string(selectionMinLine));
h+=string_height("1")+10;
draw_text(100,h,"selectionMinX: "+string(selectionMinX));
h+=string_height("1")+10;
draw_text(100,h,"selectionMinChar: "+string(selectionMinChar));
h+=string_height("1")+10;

draw_text(100,h,"selectionMaxLine: "+string(selectionMaxLine));
h+=string_height("1")+10;
draw_text(100,h,"selectionMaxX: "+string(selectionMaxX));
h+=string_height("1")+10;
draw_text(100,h,"selectionMaxChar: "+string(selectionMaxChar));
h+=string_height("1")+10;

draw_text(100,h,"hasSelection: "+string(hasSelection));
h+=string_height("1")+10;

draw_text(100,h,"sign(selection2Line-selection1Line): "+string(sign(selection2Line-selection1Line)));
h+=string_height("1")+10;

draw_text(100,h,"mousefrozen: "+string(global.mousefrozen));
h+=string_height("1")+10;
draw_text(100,h,"mouse_button: "+string(mouse_check_button(mb_left)));
h+=string_height("1")+10;
draw_text(100,h,"mouse_pressed: "+string(mouse_check_button_pressed(mb_left)));
h+=string_height("1")+10;
draw_text(100,h,"kmouseover: "+string(kmouseover));
h+=string_height("1")+10;

draw_text(100,h,"global.uiz_stepNumber: "+string(global.uiz_stepNumber));
h+=string_height("1")+10;


draw_set_color(c_red);
draw_line_width(selection1X,iy+selection1Line*fontHeight,selection1X,iy+(selection1Line+1)*fontHeight,3);
draw_set_color(c_blue);
draw_line_width(selection2X,iy+selection2Line*fontHeight,selection2X,iy+(selection2Line+1)*fontHeight,3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
