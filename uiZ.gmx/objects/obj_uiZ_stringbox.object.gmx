<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 24
//#objectversion 1.0
uiz_objinit()
value=""//s//initial value//
textcolor=c_black//c//text color//
selectbackcolor=c_blue//c//selection background color//
selecttextcolor=c_white//c//selection text color//
cursorcolor=c_black//c//typing cursor color//
margin=4//v//margin//
font=-1//f//font//
typeanimationin=uiz_exponential_in//a//type animation in//
typeanimationout=uiz_exponential_in//a//type animation out//
countspeed=1//v//type animation time//
maxlength=0//v//max length//
//accountspeed=0.08
mouseSelectionMovementSpeed=0.05//v//mouse selection movement (sec per char)//
keyHoldingTypingSpeed=0.05//v//typing speed when holding any key (sec per char)//
keyHoldingTypingTimer=0.75//v//time in sec. between holding down a key and rapid typing mode//
accountspeed=.5//v//rapid mode count time//
accbetween=0.000001//v//rapid mode speed//
messagetext="Enter a value"//s//message text on mobile//
hasbackground=true//b//enable background//
texturescript=uiz_back_circlestitch//i//texturescript//
texturescript_over=-1//i//texturescript over//
texturescript_in=-1//i//texturescript in//
texturescript_out=-1//i//texturescript out//
cursorwidth=2//v//width of the typing cursor//
acceptOnlyNumbers=true//b//accept only digits and a single .//

sprite_normal=spr_uiZ_border1//p//sprite normal//
color_normal=c_white//c//color normal//
margin_normal=8//v//margin normal//
sprite_texturemode=uiz_texturemode_fill//t//texturemode normal
border_texturemode=-1//t//texturemode border//

sprite_over=spr_uiZ_border1_over//p//sprite over//
color_over=-1//c//color over//
margin_over=-1//v//margin over//

sprite_in=spr_uiZ_border1_in//p//sprite in//
color_in=-1//c//color in//
margin_in=-1//v//margin in//

sprite_out=spr_uiZ_border1_in//p//sprite out//
color_out=-1//c//color out//
margin_out=-1//v//margin out//
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stringboxspecific technical stuff
str_real="-5.6.356THIS IS A TEST THAT THIS IS MAY BE A TEST FOR IT IS A TEST IT IS.";//the full string
uiz_stringbox_str_real_init();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check to disable this event
if kmouseover=0 and mouse_check_button(mb_left) and typing = true then {
    typing = false;
    uiz_typecursor_deregister();
    update = true;
    updated = true;
    uiz_updater_unstep();
    exit;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle type cursor animation
if (hasselection=false and typing=true) then{//draw selector
    //calculate alpha animation
    count += uiz_sc(countspeed);
    if count &gt;= 1 then {
        count = 0
    }
    if count &lt; 0.5 then {
        var anim = uiz_animation_getfunction(count * 2, typeanimationin)
    } else {
        var anim = 1 - uiz_animation_getfunction((count - 0.5) * 2, typeanimationout)
    }
 uiz_typecursor_setalpha(anim*alpha); 
 uiz_typecursor_register(typepos_dis_px,iy,typepos_dis_px,ily,cursorcolor,cursorwidth)  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check debug left-right movement

if keyboard_check_released(vk_pagedown) then{
    uiz_stringbox_shiftleft();
    uiz_updater_FixViews();

}
if keyboard_check_released(vk_pageup) then{
    uiz_stringbox_shiftright();
    uiz_updater_FixViews();

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check all needed shortcuts
if typing=true then{
uiz_stringbox_checkKeys();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///disable mouse grab
if hasmouse=true and !mouse_check_button(mb_left) then{
    global.mousefrozen=false;
    hasmouse=false;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make selections
if hasmouse = true {
    if hasselection = false then {//check if no selection has been made
    //set selection to typepos
        selpos_dis = typepos_dis;
        selpos_dis_px = typepos_dis_px;
    }

    

    var mx = uiz_getmouse_x();
    var addchar="";//hold the amount of characters not selected anymore
    var mouseinside=false;
    sel_canMove_counter+=uiz_sc(mouseSelectionMovementSpeed);
    if mx&lt;ix then{
    if sel_canMove_counter&gt;=1 then{uiz_stringbox_shiftleft();sel_canMove_counter=0;}
    }else{
    if mx&gt;ilx then{
    if sel_canMove_counter&gt;=1 then{uiz_stringbox_shiftright();sel_canMove_counter=0;}    
    }else{
    mouseinside=true;
    }
    }
    
    var selpos_dis_old=selpos_dis;//remember old value for later checks
    
    var m = 1; //m is the multiplier to allow the selection to go to the left or right
    if uiz_getmouse_x() &lt; selpos_dis_px then {
        m = -1; //selecting goes to left
    }
    mx*=m;//prepare for further processing
    //loop until all characters to be selected are selected:
    while (selpos_dis*m&lt;str_dis_size*(m+1)/2){//keep within string size bounds
        var checkchar = string_char_at(str_dis, selpos_dis+(m+1)/2)
        var chs = string_width(checkchar) ;
        if ((selpos_dis_px ) * m + chs / 2) &lt; mx then {
        //add character to selection
            selpos_dis += m;
            selpos_dis_px += chs*m;
            addchar+=checkchar;
            if selpos_dis=typepos_dis then{break;}//if selection has size 0
        } else {
            break; //end the loop
        }
    }
    //add the addchar variable to the right side of the selection
    if addchar!="" then{
    var addchar_length = string_length(addchar)
    if typepos_dis&lt;selpos_dis or typepos_dis&lt;selpos_dis_old then{//selection goes to the right of the typepos
    if m=-1 then{//selection gets smaller
    sel_str_end_m=""
        //add addchar revers
        for(var i=addchar_length;i&gt;=1;i--){
            sel_str_end_m+=string_char_at(addchar,i);
        }
        sel_str_end=sel_str_end_m+sel_str_end;
        sel_str_mid=string_copy(sel_str_mid,1,string_length(sel_str_mid)-addchar_length);
        }else{//selection gets bigger
        sel_str_end=string_copy(sel_str_end,addchar_length+1,string_length(sel_str_end)-1)
        sel_str_mid+=addchar
        }
    }else{
    if typepos_dis&gt;selpos_dis or typepos_dis&gt;selpos_dis_old then{//selection goes to the left of typepos
    if m=1 then{//selection gets smaller
    //add addchar revers
        sel_str_beg_m=addchar;
        sel_str_beg+=addchar;
        var midlen=string_length(sel_str_mid)
        var midchars = midlen-addchar_length;//the new size of the mid string (could be negative)
        sel_str_mid=string_copy(sel_str_mid,1+addchar_length,midchars);
        if midchars&lt;0 then{//midchars is a negative number, couldn't fit in str_mid:
             var endsz=string_length(sel_str_end);
             midchars=clamp(-midchars,0,endsz);
            sel_str_end=string_copy(sel_str_mid,1+midchars,endsz-midchars)
            sel_end_sz=string_length(sel_str_end);
        }
        }else{//selection gets bigger
        //add addchar reverse
        for(var i=1;i&lt;=addchar_length;i++){
            sel_str_mid=string_char_at(addchar,i)+sel_str_mid
        }
        sel_str_beg_m="";
        sel_str_beg=string_copy(sel_str_beg,1,string_length(sel_str_beg)-addchar_length);
        }
        }
    }
    }
//calculate the end points in the right order.
uiz_stringbox_calculateConnectionPoints()

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse check
if kmouseover&gt;0 then{uiz_set_cursor(cr_beam)

if global.systemsupportskeyboard = true then {
    switch (kmouseover) {

        case 3:
            if typing=false then{
            typing = true
            keyboard_oldlastchar="";
            uiz_updater_FixViews();
            }
            global.mousefrozen = true
            hasmouse=true;
            if !keyboard_check(vk_shift) then{//check for shift so we can make selections from our typing position by clicking and pressing shift.
            uiz_stringbox_selection_disable();
            sel_canMove_counter=1;
            uiz_updater_step();
            var typepos_dis_array = uiz_stringbox_getmousepos_dis();
            typepos_dis=typepos_dis_array[0];
            typepos_dis_px=typepos_dis_array[1];
            uiz_stringbox_typecursor_register();
            uiz_stringbox_resetSelStrings();
            uiz_stringbox_typepos_real_from_dis();
            }
            break;
            case 1:
            if typing=false then{
                uiz_updater_FixViews();}
            break;
        case 0:
            if typing=false then{
                uiz_updater_FixViews();}
        //there is no break statement on purpose
        case 4:
        if hasmouse=true then{
            global.mousefrozen=false;
            hasmouse=false;
            }
            if selpmin=selpmax then{//check if selection is non existant
                uiz_stringbox_selection_disable();
            }
        break;
    }
} else {
    if kmouseover = 3 then {
        str_real = get_string(messagetext, value)
        if maxlength &gt; 0 then {
            str_real = string_copy(value, 1, maxlength)
        }
    }
}

}else{
uiz_set_cursor(cr_default);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_mouse_docheck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if uiz_cntn() then{

    if font &gt; -1 then {
        draw_set_font(font)
    }
    //draw back
    if typing = 1 then {
        n = 3
    } else {
        if kmouseover = 0 then {
            var n = 0
        } else {
            n = 1
        }
    }
    uiz_back(n)

    draw_set_valign(fa_middle)
    draw_set_halign(fa_left)
    draw_set_color(textcolor)
    var y_mid = iy+iheight/2;
    //draw text
    if hasselection=true then{
    if uiz_selfmarked=true then{
        draw_text(selpos_dis_max_px_bound,y_mid,sel_str_end_m);
        draw_set_halign(fa_right)
        draw_text(selpos_dis_min_px_bound,y_mid,sel_str_beg_m);
        draw_set_halign(fa_left)
        if selpos_dis_min!=selpos_dis_max then{
        draw_square(selpos_dis_min_px_bound+1,iy,selpos_dis_max_px_bound-1,ily,selectbackcolor,alpha);//draw selector square background
        }
        draw_set_color(selecttextcolor);
        draw_text(selpos_dis_min_px_bound,y_mid,sel_str_mid);
        sel_str_end_m="";
        sel_str_beg_m="";
        
    }else{
        draw_text(selpos_dis_max_px_bound,y_mid,sel_str_end);
        draw_set_halign(fa_right)
        draw_text(selpos_dis_min_px_bound,y_mid,sel_str_beg);
        draw_set_halign(fa_left)
        if selpos_dis_min!=selpos_dis_max then{
        draw_square(selpos_dis_min_px_bound+1,iy,selpos_dis_max_px_bound-1,ily,selectbackcolor,alpha);//draw selector square background
        }
        draw_set_color(selecttextcolor);
        draw_text(selpos_dis_min_px_bound,y_mid,sel_str_mid);
        }
    }else{
    //draw vanilla text
        draw_text(ix,y_mid,str_dis);
    }

    uiz_containend()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_square(100,90,200,200,$dddddd,1)

draw_set_valign(fa_top);
draw_set_color(c_black)
draw_square(100,100,100+string_width(sel_str_beg),115,$aaaaaa,1)
draw_set_color(c_black)
draw_text(100,100,sel_str_beg)
draw_square(100,115,100+string_width(sel_str_mid),130,$aaaaaa,1)
draw_set_color(c_black)
draw_text(100,115,sel_str_mid)
draw_square(100,130,100+string_width(sel_str_end),145,$aaaaaa,1)
draw_set_color(c_black)
draw_text(100,130,sel_str_end)
draw_square(100,145,100+string_width(sel_str_beg_m),160,$aaaaaa,1)
draw_set_color(c_blue);
draw_text(100,145,sel_str_beg_m);
draw_square(100,160,100+string_width(sel_str_end_m),175,$aaaaaa,1)
draw_set_color(c_green);
draw_text(100,160,sel_str_end_m);
draw_set_color(c_fuchsia);
draw_text(100,175,str_real);
draw_set_color(c_black);
draw_text(100,190,hasselection);
draw_set_color(c_maroon);
draw_text(100,205,selpos_dis);
//draw_set_color(c_black);
draw_text(100,220,selpos_dis_px);
draw_set_color(c_black);
draw_text(100,235,keyboard_lastchar);
draw_set_color(c_black);
draw_text(100,250,ord(keyboard_lastchar));
draw_set_color(c_orange);
draw_text(100,265,selpmin);
draw_text(100,280,selpmax);
draw_text(100,295,typepos_dis);
draw_text(100,310,str_dis_size);
draw_set_color(c_red);
draw_text(100,325,d);
d="";
/*
draw_set_color(c_red);
draw_line(tp1,ry,tp1,rly)
draw_set_color(c_green);
draw_line(tp2,ry,tp2,rly)
*/
/*
draw_set_color(c_orange);
draw_line(selpos_dis_min_px_bound,ry,selpos_dis_min_px,rly)
draw_set_color($3d6040);
draw_line(selpos_dis_max_px_bound,ry,selpos_dis_max_px,rly)
draw_set_color(c_fuchsia);
draw_line(minoldtest,ry,minoldtest,rly)
draw_set_color(c_lime);
draw_line(maxoldtest,ry,maxoldtest,rly)

/*
draw_set_color(c_red);
draw_text(ix,ry,str_dis);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
