<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 1
//#exclude
//define uiZ allows the ui designer to recorginse this as a uiz object
//the #sprite images line makes the sprite of the object spr_uiZ_images instead of spr_uiZ_images_user. for userdefined objects, don't use this line.
//#spritenum 1 tells the designer what image_index of the sprite to use.
x=0
y=0
rx=0
ry=0

ix=0;
iy=0;
ilx=0;
ily=0;
doubleclicktime=0.75//in seconds
doubleclickcount=0;
global.colorscreen=noone
addx=0
addy=0
//width=surface_get_width(application_surface)
//height=surface_get_height(application_surface)
width=window_get_width()
height=window_get_height()
iwidth=width;
iheight=height;
rlx=width
rly=height
cntnx=0
cntny=0
cntnlx=width
cntnly=height
uiz_enabled=true;

global.uiz_containframe=-1;
global.screenpxwidth=width
global.screenpxheight=height
global.uiz_windows=20
global.selectedwindow=noone;
global.mousemovetoscroll=30;
global.isfixinggrandchildren=false;
global.lockwindowresel=0;
global.lockwindowreseltime=3;
children=ds_list_create()
if shader_is_compiled(sh_uiz_contain) and shaders_are_supported() then{
global.uiz_shader=1

global.uniformid_toy=shader_get_uniform(sh_uiz_contain,"toy")
global.uniformid_toy_hue=shader_get_uniform(sh_uiz_contain_hue,"toy")
global.uniformid_sz=shader_get_uniform(sh_uiz_contain,"sz")
global.uniformid_sz_hue=shader_get_uniform(sh_uiz_contain_hue,"sz")
global.uniformid_alpha_hue=shader_get_uniform(sh_uiz_contain_hue,"alpha")
global.uniformid_doy=shader_get_uniform(sh_uiz_contain_hue,"doy")
//global.uniformid_texture_hue=shader_get_sampler_index(sh_uiz_contain_hue,"s_Background")
global.uniformid_texture=shader_get_sampler_index(sh_uiz_contain,"s_Background")
global.uniformid_texture_hue=shader_get_sampler_index(sh_uiz_contain_hue,"s_Background")
global.uniformid_texture_blur=shader_get_sampler_index(sh_uiz_contain_blur,"s_Background")
global.uniformid_huevalue=shader_get_uniform(sh_uiz_contain_hue,"val")
//global.uniformid_texture_toy=shader_get_uniform(sh_uiz_contain,"toy")
global.uniformid_texture_toy_blur=shader_get_uniform(sh_uiz_contain_blur,"toy")
//global.uniformid_scs=shader_get_uniform(sh_uiz_contain,"scs")
}else{
global.uiz_shader=0
}
//global.uiz_shader=1
draw_set_font(uiz_fnt_dp_15)
lastsecondat=-1
oldselectedmouseoverobject=0
oldselectedmouseover=id
oldselectedmouseoverframe=0
topframemargin=0;
bottomframemargin=0;
leftframemargin=0;
rightframemargin=0;
view_fix=false;

//show_debug_overlay(true)
///uiz by thomas saedt, Tthecreator on the game maker forums.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check systemsupportskeyboard and systemtouchsupport
switch(os_type){
case os_windows: case os_linux: case os_macosx: case os_browser:
global.systemsupportskeyboard=true;
break;
default:
global.systemsupportskeyboard=false;
break;
}
switch(os_type){
case os_ios: case os_android: case os_winphone:
global.systemsupportstouch=true;
break;
default:
global.systemsupportstouch=false;
break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.mouseoverobject=id
global.mouseoverobjectdepth=0
global.mouseoverframe=id
global.mouseoverframedepth=0
global.mouseoverwindow=id
global.mouseoverwindowdepth=0
global.mouseoverscrollframe=id
global.mouseoverscrollframedepth=0
global.mouseover=id
global.mouseoverdepth=0
global.mouseoverdone=0
global.mousefrozen=0
global.wasmousefrozen=0
global.mousefrozensafety=0;
global.mousefrozensafetynumber=0;
global.lastmousemoved=0
global.lastmousemovedx=0
global.lastmousemovedy=0
global.lastmousemovedxsign=0
global.lastmousemovedysign=0
global.lastsecondmousemoved=0
global.lastsecondmousemovedx=0
global.lastsecondmousemovedy=0
global.uiz_instep=0;

lastmousex=uiz_getmouse_x()
lastmousey=uiz_getmouse_y()
lastsecondmousex=uiz_getmouse_x()
lastsecondmousey=uiz_getmouse_y()
global.colorlist=-1
main_alpha=1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse global variables
global.uiz_mouseis=cr_default;
global.uiz_mouseswipeclick=false;
global.uiz_mouseswipedx=0;
global.uiz_mouseswipedy=0;
global.uiz_mouseswiped=0;
global.mousedirectoverobject=false;
global.enablemousedirectoverobjectcheck=false;
dirlastmouseoverobject=id;
mouseswipeclick_distance=3;
mouseswipeclick_distancetype=dp;
mouseswipeclick_time=1;//in seconds
oldmouseswipedx=0
oldmouseswipedy=0
global.uiz_lastmouseis=0//global.uiz_mouseis;

global.uiz_cr_none=-1;
global.uiz_cr_default=-1;
global.uiz_cr_arrow=-1;
global.uiz_cr_cross=-1;
global.uiz_cr_beam=-1;

global.uiz_cr_size_nesw=-1;
global.uiz_cr_size_ns=-1;
global.uiz_cr_size_nwse=-1;
global.uiz_cr_size_we=-1;

global.uiz_cr_uparrow=-1;
global.uiz_cr_hourglass=-1;
global.uiz_cr_drag=-1;
global.uiz_cr_appstart=-1;
global.uiz_cr_handpoint=-1;
global.uiz_cr_size_all=-1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///depths compatibility
depth=0;
oldmydepth=0;

uiz_compatibility_rebuilddepths_init()

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animation handler setup
uiz_animationlist=ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup updater
uiz_surf=surface_create(width,height);
uiz_surf_secondary=surface_create(width,height);
uiz_arealist=ds_list_create();
uiz_arealist_extra=ds_list_create();
uiz_useappsurf=true;
uiz_appsurf=application_surface;
uiz_changeSurface=false;
uiz_updateall=true;
uiz_selfmarked=false;
uiz_steplist=ds_list_create();
uiz_endsteplist=ds_list_create();
uiz_arealist_oldsz=0;
//global.uiz_inredrawmode=false;
global.surfacedebugcount=0;
global.surfacedebugcounty=0;
global.uiz_debugsurface=surface_create(width,height)
global.uiz_fix_updates=0;
global.uiz_fix_updates_draw=0;
//uiz_objlist=ds_list_create()
global.debug_action=false;
uiz_resetwindowsize();

uiz_dpi_type=uiz_dpi_gettype()
uiz_dp_window_w=-1;
uiz_dp_window_h=-1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set mouse updates
lastmouseover=global.mouseover;
//lastwindowover=global.mouseoverwindow;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///snapper setup
snapm=false;
snapx=0;
snapy=0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for mousecheck fix on windows touch platforms fix.
mouseTestState=0;
mousePressed=false;
mouseReleased=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///typecursor setup
typecursor_enabled=false;
typecursor_x1=0;
typecursor_x2=0;
typecursor_y1=0;
typecursor_y2=0;
typecursor_alpha=1;
typecursor_color=c_black;
typecursor_width=0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///typing char control setup
keyboard_currentchar = '';//what char is currently being pressed
keyboard_oldlastchar = '';
keyboard_lastKeyForChar = -999;
keyboard_lastKeyTime = 0;
keyboard_lastcurrentchar = '';//what char was last pressed
keyboard_charPressed=false;//if the given char is still being pressed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_controllerend()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.mouseoverdone=0
lastmousex=uiz_getmouse_x()
lastmousey=uiz_getmouse_y()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.mousefrozen=1 then{
if global.mousefrozensafety=1 and global.mousefrozensafetynumber!=global.uiz_instep then{
global.mousefrozen=0;
global.mousefrozensafety=0;
}
}else{
global.mousefrozensafety=0;
}
global.uiz_instep++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set mouse
uiz_compute_cursor()
//global.wasmousefrozen=false;
if mouse_check_button_pressed(mb_left) then{
//sdbm("setting old",global.mouseoverobject)
oldselectedmouseoverobject=global.mouseoverobject;
oldselectedmouseover=global.mouseover;
oldselectedmouseoverframe=global.mouseoverframe;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle global.selectedwindow
/*
if mouse_check_button_pressed(mb_any) and instance_exists(global.selectedwindow) and global.selectedwindow.isresizing=0 and (global.mouseoverwindow=0 or global.mouseoverwindow=id) then{
//sdbm("resetting selected window")
global.selectedwindow=noone;
global.selectedwindowdepth=0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rebuild depths compatibility
uiz_compatibility_rebuilddepths()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///last step check

var sz=ds_list_size(uiz_endsteplist)
for(var i=0;i&lt;sz;i++){
var o=uiz_endsteplist[|i];
if instance_exists(o) then{
with(o){event_user(5);}
}
}
ds_list_empty(uiz_endsteplist);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw updater and extra addition
//add extras
/*
var l=uiz_arealist_extra;
var sz=ds_list_size(l);
uiz_arealist_oldsz=sz;
if (sz mod 5) = 0 then{
for(var i=0;i&lt;sz;i+=5){
var aide=l[|i];
if instance_exists(aide){
if uiz_updater_FixViews_addsquare(l[|i+1],l[|i+2],l[|i+3],l[|i+4])=false then{
aide.uiz_selfmarked=false;}else{
sdbm("ADDED EXTRA");
}
}
}
}
ds_list_clear(l);
*/

var l=uiz_arealist_extra;
var l2=uiz_arealist;
var sz=ds_list_size(l);
uiz_arealist_oldsz=ds_list_size(l2);
if (sz mod 5) = 0 then{
for(var i=sz-5;i&gt;=0;i-=5){
var aide=l[|i];
if instance_exists(aide){
if uiz_updater_FixViews_addsquare(l[|i+1],l[|i+2],l[|i+3],l[|i+4])=false then{
aide.uiz_selfmarked=false;}else{
ds_list_add(l2,aide)
}

}
}
}
ds_list_clear(l);


uiz_updater_FixViews_processing(obj_uiZ_controller);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for mousecheck fix
if (os_type=os_windows){
        mousePressed=false;
        mouseReleased=false;
    if mouseTestState=2{//mouse has released previousely with errors
        //another error fix
        mouseTestState=0;
        mouseReleased=true;
    }
    if mouse_check_button_pressed(mb_left) then{
        mouseTestState=1;
    }
    if mouse_check_button_released(mb_left) and mouseTestState=0 then{
        //error seen
        mousePressed=true;
        mouseTestState=2;
    }   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///detect changes in windowsize
if window_get_width()!=global.screenpxwidth or window_get_height()!=global.screenpxheight then{
uiz_resetwindowsize();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if lastmousex=uiz_getmouse_x() and lastmousey=uiz_getmouse_y() then{
global.lastmousemovedy=0
global.lastmousemovedx=0
global.lastmousemoved=0
}else{global.lastmousemoved=sqrt(sqr(lastmousex-uiz_getmouse_x())+sqr(lastmousey-uiz_getmouse_y()))
global.lastmousemovedy=lastmousey-uiz_getmouse_y()
global.lastmousemovedx=lastmousex-uiz_getmouse_x()
}
if global.lastmousemovedx!=0 then{global.lastmousemovedxsign=uiz_sign(global.lastmousemovedx)}
if global.lastmousemovedy!=0 then{global.lastmousemovedysign=uiz_sign(global.lastmousemovedy)}
//global.windowhaschanged=0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control double click
global.doubleclick=0;
if doubleclickcount&gt;0 then{
doubleclickcount++;
if mouse_check_button_pressed(mb_left) then{global.doubleclick=1;doubleclickcount=0;}
if doubleclickcount&gt;=doubleclicktime*room_speed then{doubleclickcount=0;}
}else{
if mouse_check_button_pressed(mb_left) then{doubleclickcount=1;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle global.selectedwindow and other window stuff
if !instance_exists(global.selectedwindow) then{
global.selectedwindow=noone;
}
///handle mouse and selection
isresizing=0;
/*

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set cursor sprite
/*if global.mousefrozen=false then{
uiz_set_cursor(cr_default)}
*/

//global.wasmousefrozen=max(global.mousefrozen,global.wasmousefrozen);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///this code runs every 1/4TH OF A SECOND.
var t=floor((get_timer()/1000000)*4);//set t in seconds
if t&gt;lastsecondat then{lastsecondat=t;
//execute code

if lastsecondmousex=uiz_getmouse_x() and lastsecondmousey=uiz_getmouse_y() then{
global.lastsecondmousemovedy=0
global.lastsecondmousemovedx=0
global.lastsecondmousemoved=0
}else{global.lastsecondmousemoved=sqrt(sqr(lastsecondmousex-uiz_getmouse_x())+sqr(lastsecondmousey-uiz_getmouse_y()))
global.lastsecondmousemovedy=lastsecondmousey-uiz_getmouse_y()
global.lastsecondmousemovedx=lastsecondmousex-uiz_getmouse_x()
}
lastsecondmousey=uiz_getmouse_y()
lastsecondmousex=uiz_getmouse_x()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control global.mouseswipedx

if mouse_check_button_pressed(mb_left) then{
oldmouseswipedx=uiz_getmouse_x()
oldmouseswipedy=uiz_getmouse_y()
/*
sdbm("setting old",global.mouseoverobject)
oldselectedmouseoverobject=global.mouseoverobject;
oldselectedmouseover=global.mouseover;
oldselectedmouseoverframe=global.mouseoverframe;
*/
}
if mouse_check_button(mb_left) then{
global.uiz_mouseswipedx=uiz_getmouse_x()-oldmouseswipedx;
global.uiz_mouseswipedy=uiz_getmouse_y()-oldmouseswipedy;
global.uiz_mouseswiped=uiz_pyth(global.uiz_mouseswipedx,global.uiz_mouseswipedy)

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control uiz_mouseswipeclick
//if either holding mouse for a longer time or moving mouse fast.

if mouse_check_button(mb_left) then{//mswc_count+=uiz_sc(mouseswipeclick_time);
//sdbm(global.lastmousemoved,uiz_getposx_simple(mouseswipeclick_distance,mouseswipeclick_distancetype))
if global.lastmousemoved&gt;=uiz_getposx_simple(mouseswipeclick_distance,mouseswipeclick_distancetype)/fps_real then{
global.uiz_mouseswipeclick=true;
//reset mouse to old object

}
}else{
global.uiz_mouseswipeclick=false;
}
if global.uiz_mouseswipeclick=true then{
//sdbm("setting it",oldselectedmouseoverobject)
global.mouseoverobject=oldselectedmouseoverobject;
global.mouseover=oldselectedmouseover;
global.mouseoverframe=oldselectedmouseoverframe;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control mouse
//global.uiz_debug_text="";
//global.uiz_debug_count=0;
//uiz_updater_debug_processing(id)

if global.mousefrozen=false and global.wasmousefrozen=false and global.uiz_mouseswipeclick=false then{
//reset
global.mouseoverobject=id
global.mouseoverobjectmydepth=0
global.mouseoverwindow=id
global.mouseoverwindowmydepth=0
global.mouseoverframe=id
global.mouseoverframemydepth=0
global.mouseoverscrollframe=id
global.mouseoverscrollframemydepth=0
global.mouseover=id
global.mouseovermydepth=0
global.mouseoverdone=1
//check new
uiz_updater_mouse_processing(id);
if lastmouseover!=global.mouseover then{
with(lastmouseover){
    with(other.lastmouseover){
        kmouseover=0;   
        event_user(2);
    }
}
lastmouseover=global.mouseover;
global.uiz_mouseis=cr_default;
}

if global.mouseover!=id then{
    with(global.mouseover){
        with(global.mouseover){
            var k=uiz_mouse_isonobject_leftcheck(id);
                if k!=kmouseover then{
                    kmouseover=k;
                    event_user(2);
                }
            }
        }
    }
}
if instance_exists(global.mouseover) and global.mouseover!=id then{
with(global.mouseover){
event_user(3);
};
}
if instance_exists(global.mouseoverframe) and global.mouseoverframe!=global.mouseover and global.mouseoverframe!=id then{
with(global.mouseoverframe){
event_user(3);
};
}
/*
if ds_exists(children,ds_type_list) then{
var sz=ds_list_size(children);
for(var i=0;i&lt;sz;i++){
uiz_updater_mouse_processing(children[|i])
}
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///updater
global.uiz_fix_updates=0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check the typeing char
var doNoKeyCheck=true;
if keyboard_check(vk_lalt) then{
        keyboard_lastKeyForChar=vk_lalt;
        }
if keyboard_lastchar!='' then{
    //if key has been pressed
    if (keyboard_oldlastchar!=keyboard_lastchar) || keyboard_check_pressed(keyboard_lastKeyForChar) || (keyboard_check_released(vk_lalt) &amp;&amp; keyboard_lastKeyForChar=vk_lalt) then{
        keyboard_currentchar=keyboard_lastchar;
        keyboard_lastcurrentchar=keyboard_currentchar;
        if !keyboard_check(vk_lalt) || keyboard_check_released(vk_lalt) then{ //keyboard_lastKeyForChar!=vk_lalt || 
        if keyboard_lastKeyForChar=vk_lalt then{
        keyboard_lastKeyForChar=-999;
        doNoKeyCheck=false;
        }else{
        keyboard_lastKeyForChar=keyboard_key;
        }
        keyboard_lastKeyTime=current_time;
        keyboard_charPressed=true;
        
        }
    }else{
    keyboard_currentchar='';
    }
}else{
    keyboard_currentchar = '';
}
//sdbm("donokey",doNoKeyCheck)
if doNoKeyCheck=true and (keyboard_check(vk_nokey) || !keyboard_check(keyboard_lastKeyForChar)) then{
//sdbm("reseeting key p");
    keyboard_currentchar='';
    keyboard_charPressed=false;
}

keyboard_oldlastchar=keyboard_lastchar;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for window
if global.mouseoverwindow=id and mouse_check_button(mb_any) then{
    uiz_window_select(noone)
}
/*
if lastwindowover!=global.selectedwindow then{
    with(lastwindowover){
        uiz_window_fixbackground();
    }
    with(lastwindowover){
        uiz_window_fixbackground();
    }
    lastwindowover=global.selectedwindow;

    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///control mouse frozen
if global.mousefrozen=false then{
if mouse_check_button(mb_none) then{ 
global.wasmousefrozen=false}
}else{
global.wasmousefrozen=true
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if mouse_check_button_pressed(mb_left) then{
global.mousedirectoverobject=true;
dirlastmouseoverobject=global.mouseoverobject
}
if global.mouseoverobject!=dirlastmouseoverobject then{
global.mousedirectoverobject=false;
}else{
global.mousedirectoverobject=true;
}

if global.lockwindowresel&gt;0 then{
global.lockwindowresel--;
}
///uiz by thomas saedt, Tthecreator on the game maker forums.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///updater

var sz=ds_list_size(uiz_steplist)
for(var i=0;i&lt;sz;i++){
var o=uiz_steplist[|i];
if instance_exists(o) and o.uiz_enabled=true then{
with(o){event_user(4);}
}else{
ds_list_delete(uiz_steplist,i);
i--;
sz--;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update animations
var sz=ds_list_size(uiz_animationlist)
for(var i=0;i&lt;sz;i++){
var o=uiz_animationlist[|i];
if o=undefined then{continue;}
if instance_exists(o) then{
with(o){if uiz_getscalervalues_counter() then{inanimation=false;ds_list_delete(other.uiz_animationlist,i)}

}
}else{
sdbm("[uiZ:ERROR]Found invalid object inside the animationlist")
ds_list_delete(uiz_animationlist,i)
if sz&gt;1 then{i--;}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle changes in dpi
if uiz_dpi_type=2 then{
//check for dpichanges
var dp_new=uiz_dpi_getdpi();
if dp_new!=uiz_dp then{
uiz_dp=dp_new;
//resize window
if uiz_dp_window_w&gt;0 and uiz_dp_window_h&gt;0 then{
window_set_size(uiz_dp_window_w*uiz_dp,uiz_dp_window_h*uiz_dp);
}
//redo font
UIZ_FONT();
uiz_fixchildren(obj_uiZ_controller,true)
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for debug
if !instance_exists(obj_uiZ_debugmanager) and keyboard_check(vk_control) and keyboard_check(vk_shift) and keyboard_check(ord("I")) then{

    instance_create(0,0,obj_uiZ_debugmanager);
}

if keyboard_check(vk_control) &amp;&amp; keyboard_check(vk_f5) then{
 uiz_updater_FixViews_addsquare(0,0,width,height);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_controllerend()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_controllerend()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(uiz_surf){
uiz_surf=surface_create(width,height);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if uiz_dpi_type=2 and uiz_dp_window_w&gt;0 and uiz_dp_window_h&gt;0 then{
uiz_dp_window_w = window_get_width()/uiz_dp;
uiz_dp_window_h = window_get_height()/uiz_dp;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///loop debug
/*
//draw_text(10,100,uiz_debug_getposes(id,1))
var o=global.mouseover;
draw_square(o.rx,o.ry,o.rlx,o.rly,c_red,0.5)
draw_text(o.rx,o.ry,object_get_name(o.object_index))
draw_text(o.rx,o.ry+20,o)
//if keyboard_check_released(vk_space){sdbm(uiz_debug_getposes(id,1))}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///utilize updater
global.uiz_fix_updates_draw=0;
var l=uiz_arealist
//sdbm("l uiz_AREALIST",l)
//and keyboard_check(ord("N"))
if (ds_exists(l,ds_type_list) and ds_list_size(l)&gt;=4) or uiz_updateall=true then{

//sdbm("[uiZ|upd]Applying updater",ds_list_size(l))

if uiz_useappsurf=true then{
uiz_appsurf=application_surface
}else{
if !surface_exists(uiz_appsurf) then{uiz_appsurf=surface_create(width,height);}
}

if !surface_exists(uiz_surf) {uiz_surf=surface_create(width,height);}
//surface_set_target(uiz_surf);

global.surfacedebugcount=0
global.surfacedebugcounty=0;
//uiz_debug_drawsurface(uiz_appsurf,"app")
//uiz_debug_drawsurface(uiz_surf,"uiz")
surface_set_target(uiz_appsurf)
//sdbm("executing draw_clear at place",0,random(99),obj_uiZ_window.uiz_doredraw,obj_uiZ_window.uiz_dodraw)

if uiz_updateall=true then{
draw_clear_alpha(c_white,1);
draw_set_color(c_white)
draw_set_alpha(1)
}else{
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_clear_alpha(c_black,0);
draw_set_color(c_white)
draw_set_alpha(1)
//draw list
var sz=ds_list_size(l);
var m=uiz_arealist_oldsz;
var drawstate=true;
for(var i=0;i&lt;m;i+=4){
var lw=l[|i+2]-l[|i];
var law=0;
//if lw&lt;5 then{law=(5-lw)/2}else{law=0;}
var lh=l[|i+3]-l[|i+1];
var lah=0;
//if lh&lt;5 then{lah=(5-lh)/2}else{lah=0;}
draw_rectangle(l[|i]-law,l[|i+1]-lah,l[|i+2]+law,l[|i+3]+lah,false)
//draw_set_color(c_black);
//draw_text(l[|i]-law,l[|i+1]-lah,"("+string(l[|i]-law)+","+string(l[|i+1]-lah)+") ("+string(l[|i+2]+law)+","+string(l[|i+3]+lah)+")")
//draw_set_color(c_white);
}
for(var i=m;i&lt;sz;i+=5){
var lw=l[|i+2]-l[|i];
var law=0;
//if lw&lt;5 then{law=(5-lw)/2}else{law=0;}
var lh=l[|i+3]-l[|i+1];
var lah=0;
//if lh&lt;5 then{lah=(5-lh)/2}else{lah=0;}
draw_rectangle(l[|i]-law,l[|i+1]-lah,l[|i+2]+law,l[|i+3]+lah,false)
//draw_set_color(c_red);
//draw_text(l[|i]-law+20,l[|i+1]-lah,"("+string(l[|i]-law)+","+string(l[|i+1]-lah)+") ("+string(l[|i+2]+law)+","+string(l[|i+3]+lah)+")")
//draw_set_color(c_white);
}

}
ds_list_clear(l)


surface_reset_target()//reset appsurf
surface_set_target(uiz_surf)
draw_set_blend_mode_ext(bm_zero,bm_inv_src_alpha)
draw_surface(uiz_appsurf,0,0);
draw_set_blend_mode_ext(bm_one,bm_inv_src_alpha);
uiz_changeSurface=false;
//set shader
if global.uiz_shader=true then{
shader_set(sh_uiz_contain);
uiz_contain_shader_uniforms_set();
draw_set_blend_mode_ext(bm_one,bm_inv_src_alpha);
}else{
draw_set_blend_mode(bm_normal);
}

uiz_updater_updateSet(obj_uiZ_controller)
surface_reset_target();
if global.uiz_shader=true then{
shader_reset();
draw_set_blend_mode(bm_normal)
}

draw_surface_ext(uiz_appsurf,room_width/2,room_height/2,0.5,0.5,0,c_white,0.7)

uiz_updateall=false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(uiz_surf){
uiz_surf=surface_create(width,height);
}
if !surface_exists(uiz_surf_secondary){
uiz_surf_secondary=surface_create(width,height);
}

draw_set_blend_mode(bm_normal);
draw_set_color(c_white)
draw_set_alpha(1)
draw_surface(uiz_surf,0,0)
//draw_text(10,50,string(global.uiz_fix_updates)+"; "+string(global.uiz_fix_updates_draw))


/*
var d=global.mouseover;
if instance_exists(d) then{
draw_square(d.rx,d.ry,d.rlx,d.rly,c_red,0.1)
}
*/
//draw_surface_ext(application_surface,0,0,1,1,0,c_red,0.5)
//if surface_exists(global.uiz_debugsurface){draw_surface(global.uiz_debugsurface,0,0)}


//uiz_textmiddle_topleft()
//draw_text(20,50,global.uiz_debug_text)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw snap icon.
if snapm=true then{draw_square(snapx-3,snapy-3,snapx+3,snapy+3,c_red,1)}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw typecursor system
if typecursor_enabled=true then{
draw_set_color(typecursor_color);
draw_set_alpha(typecursor_alpha);
draw_line_width(typecursor_x1,typecursor_y1,typecursor_x2,typecursor_y2,typecursor_width);
draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
