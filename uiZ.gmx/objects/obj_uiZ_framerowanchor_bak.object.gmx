<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#exclude
uiz_objinit()
draw=false
color=c_white
alpha=1
sprite=spr_uiZ_framepullline
spriteconnectionleft=spr_uiZ_framepulllineconnectionleft
spriteconnectionright=spr_uiZ_framepulllineconnectionright
spriteconnectiontop=spr_uiZ_framepulllineconnectiontop
spriteconnectionbottom=spr_uiZ_framepulllineconnectionbottom
texturemode=uiz_texturemode_fill
thickness=15
iscover=0
fromx=0
fromy=0
tox=0
toy=0
frameat[0]=noone
isize[0]=0
marginl=0
marginr=0
margint=0
marginb=0
margincellw=0
margincellh=0
overframebar=0
lastmouse=0
snaptomouse=0
snaptobar=0
stopsnap=0
margin=30
minsizeinframeset=0
minsizeinframesetvaltype=px
maxsizeinframeset=0
maxsizeinframesetvaltype=px
framesetbar=0

snaptoparent=1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
///#define uiZ
//#exclude
width=0
height=0
lx=x+width
ly=y+height
children=-1
listpos=-1
uiz_initparent()
snaptoparent=1
rx=parent.rx+x
ry=parent.ry+y
rlx=parent.rx+lx
rly=parent.ry+ly
draw=0
color=c_white
alpha=1
sprite=spr_uiZ_framepullline
spriteconnectionleft=spr_uiZ_framepulllineconnectionleft
spriteconnectionright=spr_uiZ_framepulllineconnectionright
texturemode=uiz_texturemode_fill
thickness=15
//setup list
//children=ds_list_create()
iscover=0
fromx=0
fromy=0
tox=0
toy=0
addx=0
addy=0
frameat[0]=0
isize[0]=0
marginl=0
marginr=0
margint=0
marginb=0
margincellw=0
margincellh=0
overframebar=0
lastmouse=0
snaptomouse=0
snaptobar=0
stopsnap=0
margin=30
minsizeinframeset=0
minsizeinframesetvaltype=px
maxsizeinframeset=0
maxsizeinframesetvaltype=px
framesetbar=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(children,ds_type_list) then{ds_list_destroy(children)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_uiZ_framerowanchor_bak</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if global.mouseover=id and mouse_check_button(mb_left) then{
if snaptomouse=0 and frameat[overframebar].framesetbar=1 then{
snaptomouse=1
snaptobar=overframebar
global.mousefrozen=1
lastmouse=uiz_getmouse_y()
}
}else{if snaptomouse=1 then{
var nheight=frameat[snaptobar+1].rly
var ny=frameat[snaptobar].ry
stopsnap=0
//if !(uiz_getmouse_y()&gt;=ny and uiz_getmouse_y()&lt;=nheight) then{

//}
snaptomouse=0 global.mousefrozen=0}}
if snaptomouse&gt;0 then{
if frameat[snaptobar].maxsizeinframeset=0 then{
var dm=0
}else{
var dm=(frameat[snaptobar+1].ly-uiz_getposy(frameat[snaptobar].maxsizeinframeset,frameat[snaptobar].maxsizeinframesetvaltype));
}
if frameat[snaptobar+1].maxsizeinframeset=0 then{
var du=0
}else{
var du=(frameat[snaptobar+1].ly-uiz_getposy(frameat[snaptobar+1].maxsizeinframeset,frameat[snaptobar+1].maxsizeinframesetvaltype));
}

//dbm(dm,frameat[snaptobar],frameat[snaptobar+1])
var nheight=frameat[snaptobar+1].ly-margin+min(-uiz_getposy(frameat[snaptobar+1].minsizeinframeset,frameat[snaptobar+1].minsizeinframesetvaltype),-dm)
var ny=frameat[snaptobar].y+margin+max(uiz_getposy(frameat[snaptobar].minsizeinframeset,frameat[snaptobar].minsizeinframesetvaltype),du)//+(frameat[snaptobar+1].ly-uiz_getposy(frameat[snaptobar].maxsizeinframeset,frameat[snaptobar].maxsizeinframesetvaltype))
var cheight=frameat[snaptobar+1].rly-margin+min(-uiz_getposy(frameat[snaptobar+1].minsizeinframeset,frameat[snaptobar+1].minsizeinframesetvaltype),-dm)
var cy=frameat[snaptobar].ry+margin+max(uiz_getposy(frameat[snaptobar].minsizeinframeset,frameat[snaptobar].minsizeinframesetvaltype),du)//+(frameat[snaptobar+1].ly-uiz_getposy(frameat[snaptobar].maxsizeinframeset,frameat[snaptobar].maxsizeinframesetvaltype))

if uiz_getmouse_x()&lt;0 or uiz_getmouse_y()&lt;0 or uiz_getmouse_x()&gt;global.screenpxwidth or uiz_getmouse_y()&gt;global.screenpxheight 
//or uiz_getmouse_x&lt;rx or uiz_getmouse_y()&lt;ry or uiz_getmouse_x&gt;rlx or uiz_getmouse_y()&gt;rly
then{stopsnap=1}

if stopsnap=1 then{mousediff=0}else{mousediff=lastmouse-uiz_getmouse_y()}
lastmouse=uiz_getmouse_y()

if isizetype[snaptobar]=xtra and isizetype[snaptobar+1]=xtra then{
//convert the first to a factor
isizetype[snaptobar]=fc
//set appropriate size
isize[snaptobar]=frameat[snaptobar].height/height
}
stopsnap=0
switch(isizetype[snaptobar]){
case px:
isize[snaptobar]-=mousediff
if uiz_getmouse_y()&lt;cy then{isize[snaptobar]=ny stopsnap=1}
if uiz_getmouse_y()&gt;cheight then{isize[snaptobar]=nheight stopsnap=1}
break;
case fc:
isize[snaptobar]=min(1-1/height,max(1/height,((isize[snaptobar]*height)-mousediff)/height))
if uiz_getmouse_y()&lt;cy then{isize[snaptobar]=ny/height stopsnap=1}
if uiz_getmouse_y()&gt;cheight then{isize[snaptobar]=nheight/height stopsnap=1}
break;
case dp:
isize[snaptobar]-=mousediff/uiz_dp
if uiz_getmouse_y()&lt;cy then{isize[snaptobar]=ny/uiz_dp stopsnap=1}
if uiz_getmouse_y()&gt;cheight then{isize[snaptobar]=nheight/uiz_dp stopsnap=1}
break;
}
switch(isizetype[snaptobar+1]){
case px:
isize[snaptobar+1]+=mousediff
if uiz_getmouse_y()&lt;cy then{isize[snaptobar]=nheight stopsnap=1}
if uiz_getmouse_y()&gt;cheight then{isize[snaptobar]=ny stopsnap=1}
break;
case fc:
isize[snaptobar+1]=min(1-1/height,max(1/height,((isize[snaptobar+1]*height)+mousediff)/height))
if uiz_getmouse_y()&lt;cy then{isize[snaptobar]=nheight/height stopsnap=1}
if uiz_getmouse_y()&gt;cheight then{isize[snaptobar]=ny/height stopsnap=1}
break;
case dp:
isize[snaptobar+1]+=mousediff/uiz_dp
if uiz_getmouse_y()&lt;cy then{isize[snaptobar]=nheight/uiz_dp stopsnap=1}
if uiz_getmouse_y()&gt;cheight then{isize[snaptobar]=ny/uiz_dp stopsnap=1}
break;
}
//isize[snaptobar+1]=clamp(isize[snaptobar+1],)
uiz_framesetfixhorizontal(id)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_mouse_docheck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if draw=true then{
var ux,uwidth,uy,uheight
var h=-thickness/2;
draw_set_alpha(alpha)
draw_set_color(color)
for(var i=0;i&lt;divisions-1;i++){
//sdbm("possible crash here",id)
h+=isz[i]
if frameat[i].framesetbar=1 then{
ux=0
uwidth=width
uy=h
uheight=thickness
//draw the sprite connecting the verical framedivider and this horizontal one.
if parent.object_index=obj_uiZ_framecolanchor then{
var nwidth=uwidth//-parent.thickness/2
var nheight=uheight
var nry=ry+uy
if inlistpos&gt;0 and parent.frameat[inlistpos-1].framesetbar=1 then{
var nrx=rx+ux//-parent.thickness/2
if spriteconnectionleft!=0 then{
var simg;
if mouseover=id and overframebar=i then{
if mouse_check_button(mb_left) then{
simg=2
}else{
simg=1
}
}else{
if mouseover=parent.id and parent.overframebar=inlistpos-1 then{
if mouse_check_button(mb_left) then{
simg=4
}else{
simg=3
}
}else{
simg=0}}


draw_sprite_ext(spriteconnectionleft,simg,rx+ux-parent.thickness,nry,parent.thickness/sprite_get_width(spriteconnectionleft),thickness/sprite_get_height(spriteconnectionleft),0,c_white,1)
}
}else{
var nrx=rx+ux
}

if inlistpos+1&lt;parent.divisions and framesetbar=1 then{
var nrlx=rx+ux+uwidth//-parent.thickness/2
if spriteconnectionright!=0 then{
if mouseover=id and overframebar=i then{
if mouse_check_button(mb_left) then{
simg=2
}else{
simg=1
}
}else{
if mouseover=parent.id and parent.overframebar=inlistpos then{
if mouse_check_button(mb_left) then{
simg=4
}else{
simg=3
}
}else{
simg=0}}

draw_sprite_ext(spriteconnectionright,simg,nrlx,nry,parent.thickness/sprite_get_width(spriteconnectionright),thickness/sprite_get_height(spriteconnectionright),0,c_white,1)
}
}else{
var nrlx=rx+ux+uwidth
}
var nrly=ry+uy+uheight
}else{
var nwidth=uwidth
var nheight=uheight
var nrx=rx+ux
var nry=ry+uy
var nrlx=rx+ux+uwidth
var nrly=ry+uy+uheight
}

if sprite!=0 then{
var nsw=sprite_get_width(sprite)
var nsh=sprite_get_height(sprite)
switch(texturemode){
case uiz_texturemode_fill:
var szx=1
var szy=1
break;
case uiz_texturemode_tile:
var szx=nwidth/nsw
var szy=nheight/nsh
break;
case uiz_texturemode_tilefit:
var szx=round(nwidth/nsw);
var szy=round(nheight/nsh);
break;
default:
szx=1
szy=1
}
//texture_set_repeat(0)
//top
if mouseover=id and overframebar=i then{
if mouse_check_button(mb_left) then{
tex=sprite_get_texture(sprite,2)
}else{
tex=sprite_get_texture(sprite,1)
}
}else{
tex=sprite_get_texture(sprite,0)}
draw_primitive_begin_texture(pr_trianglestrip,tex)
//draw_vertex_texture(nrx,nry-nsh,0,0)
draw_vertex_texture(nrx,nry,0,0)
draw_vertex_texture(nrx,nrly,0,1)
//draw_vertex_texture(nrlx,nry-nsh,szx,0)
draw_vertex_texture(nrlx,nry,szx,0)
draw_vertex_texture(nrlx,nrly,szx,1)
draw_primitive_end()
}else{
draw_square(nrx,nry,nrlx,nrly,color,1)
}
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(children,ds_type_list) then{ds_list_destroy(children)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(children,ds_type_list) then{ds_list_destroy(children)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
