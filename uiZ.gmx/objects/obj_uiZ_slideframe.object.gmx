<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 3
//#objectversion 1.0
uiz_objinit()
draw=0
mark=false//b//mark
debugmark=false//b//debugmark
//mark=true
//deugmark=true
markcolor=irandom(255*255*255)
iscover=0
fromx=0
fromy=0
tox=0
toy=0
inlistpos=0
snaptoparent=1
scrolly=false//b//scroll y//
scrollyspeed=30//v//scroll y speed//
scrollx=false//b//scroll x//
scrollxspeed=30//v//scroll x speed//
snapm=false;
snapk=false;
snapx=0;
snapy=0;
scrollbarsprite=spr_uiZ_scrollbar//p//sprite//
scrollbarcolor=c_white//c//color//
scrollbarbacktexturemode=uiz_texturemode_fill//t//texturemode//
scrollbarsize=0.2//v//scrollbar size//
scrollbarsizetype=dp//v//scrollbar size type//
scrollbary=!global.systemsupportstouch//b//auto vertical scrollbar//
scrollbarx=!global.systemsupportstouch//b//auto horizontal scrollbar//
autoupdatescrolly=false//b//auto update vertical scrollbar//
autoupdatescrollx=false//b//auto update horizontal scrollbar//
scrollbarAnimation=uiz_smoothstep//a//scrollbar animation//
scrollbarAnimationTime=0.3//v//scrollbar animation time//
updatescrolly=false;
updatescrollx=false;
uscrolly=uiz_drawscrollbar_init();
uscrollx=uiz_drawscrollbar_init();
mscrollbary=0;
mscrollbarx=0;
scrollbarcorner_x=0;
scrollbarcorner_y=0;
scrollupdateobjs=ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///slideframe specific stuff
blackframe=noone;
blackframeanimation=uiz_circular_in
blackframealpha=0.4;
forceanim=false
snapanimationtime=.25;
snapanimation=uiz_acceldecel;
value=false;
newvalue=false;
inanim=0;
menubutton=noone;
menumousecoversize=0.5;
menumousecoversizetype=dp;
mouseMinMoveSpeed=0;
mouseMinMoveSpeedType=dp;
hasmouse=false;
mouseborderoutside=true;
mouseborderinside=true;
moves_mouse=false;
mouse_over=false;
mouse_snapx=0;
mouse_snapy=0;
posbool = 1;
mw=0;
mmms=0;
slideWindowSizeDegrees = 30;//how many degrees are allowed for moving.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if ds_exists(children,ds_type_list) then{ds_list_destroy(children)}
//if surface_exists(containframe) then{surface_free(containframe)}
uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get snapping values
if uiz_frame_getscrolling()=false then{
var dofix=false;
//check if mouse is over edge
var mouse_over_last=mouse_over;
mouse_over=false;

if mouse_check_button(mb_left) then{
//check the animationbutton
if (menubutton!=noone and menubutton.kmouseover=3) or (newvalue=true and blackframe!=noone and blackframe.kmouseover=3) then{
if inanim=0 or inanim=1 then{inanim=uiz_sc(snapanimationtime);newvalue=!value;}else{
newvalue=!newvalue;
var animval=1-uiz_animation_getFunction(inanim,snapanimation);
inanim=uiz_animation_revertFunction(animval,snapanimation);
};
}
if posmode = uiz_horizontal then{
if posinframex=uiz_snapleft then{
if point_in_rectangle(uiz_getmouse_x(),uiz_getmouse_y(),rlx-mw*mouseborderinside,ry,rlx+mw*mouseborderoutside,rly) then{
mouse_over=true;
}
}else{
if point_in_rectangle(uiz_getmouse_x(),uiz_getmouse_y(),rx-mw*mouseborderoutside,ry,rx+mw*mouseborderinside,rly) then{
mouse_over=true;
}
}
}else{
if posinframey=uiz_snaptop then{
if point_in_rectangle(uiz_getmouse_x(),uiz_getmouse_y(),rx,rly-mw*mouseborderinside,rlx,rly+mw*mouseborderoutside) then{
mouse_over=true;
}
}else{
if point_in_rectangle(uiz_getmouse_x(),uiz_getmouse_y(),rx,ry-mw*mouseborderoutside,rlx,ry+mw*mouseborderinside) then{
mouse_over=true;
}
}
}

}else{
if moves_mouse=true then{
var setpoint;
if posmode = uiz_horizontal then{
setpoint=setpointx;
}else{
setpoint=setpointy;
}
/*
left:
    left to right:
        newvalue = true;
        setpointx goes from 1 to 0;
        an = 1-setpoint
    right to left:
        newvavlue = false;
        setpoint goes from 0 to 1;
        an = setpoint

right:
    right to left:
        newvalue=true;
        setpointx goes from 0 to 1;
        an = setpoint
    left to right:
        newvalue=false;
        setpointx goes from 1 to 0;
        an = 1-setpoint;

*/
if newvalue^posbool=false then{
inanim = uiz_animation_revertFunction(1-setpoint,snapanimation);
}else{
inanim = uiz_animation_revertFunction(setpoint,snapanimation);
}
moves_mouse=false;
uiz_mouse_unfreeze();
}
}
//check if mouse over edge is moving
if mouse_check_button(mb_left) and moves_mouse=false and (mouse_over=true or mouse_over_last=true) and global.uiz_mouseswiped&gt;mmms then{
var sx = global.uiz_mouseswipedx;
var sy = global.uiz_mouseswipedy;
mouse_snapx=uiz_getmouse_x();
mouse_snapy=uiz_getmouse_y();
if posmode = uiz_horizontal then{
movewindow = abs(darctan(sy/sx));//get how much the mouse moves in the right direction vs the wrong one.
}else{
movewindow = abs(darctan(sx/sy));//get how much the mouse moves in the right direction vs the wrong one.
}
if movewindow&lt;slideWindowSizeDegrees then{
moves_mouse=true;
uiz_mouse_freeze();
}
}
//add mouse panel dragging
if moves_mouse=true then{
var ss;
if posmode = uiz_horizontal then{
var mouse_val=(uiz_getmouse_x()-mouse_snapx)/width;
setpointx=clamp((1-value)-mouse_val*posmult,0,1);
if posmult=-1 then{
    setpointx = 1-setpointx;
    uiz_slideframe_blackframe_calculate(1-setpointx);
    uiz_slideframe_menubutton_calculate(1-setpointx);
}else{
    uiz_slideframe_blackframe_calculate(setpointx);
    uiz_slideframe_menubutton_calculate(setpointx);
}
ss = global.uiz_mouseswipedx;
}else{
var mouse_val=(uiz_getmouse_y()-mouse_snapy)/height;
setpointy=clamp((1-posbool)-mouse_val,0,1);
if posmult=-1 then{
    setpointy = 1-setpointy;
    uiz_slideframe_blackframe_calculate(1-setpointy);
    uiz_slideframe_menubutton_calculate(1-setpointy);
}else{
    uiz_slideframe_blackframe_calculate(setpointy);
    uiz_slideframe_menubutton_calculate(setpointy);
}
ss = global.uiz_mouseswipedy;
}
//set to what value we are going
if ss*posmult&gt;0 then{newvalue=true;}else{newvalue=false;}
dofix=true;
}else{


if inanim&gt;0 then{
//sdbm("inanim",inanim)
var setp = 0;
inanim+=uiz_sc(snapanimationtime);
if inanim&gt;=1 then{
inanim=1
//sdbm("end inanim",inanim)
value=newvalue;
inanim=0;
setp=1;
}else{
setp = uiz_animation_getFunction(inanim,snapanimation);
}

if (newvalue^posbool)=false then{
      setp = 1-setp;
}
if posmode = uiz_horizontal then{
    setpointx = setp;
}else{
    setpointy = setp;
}
if posmult=-1 then{
    uiz_slideframe_blackframe_calculate(1-setp);
    uiz_slideframe_menubutton_calculate(1-setp);
}else{
    uiz_slideframe_blackframe_calculate(setp);
    uiz_slideframe_menubutton_calculate(setp);
}
dofix=true;
}
}
if dofix then{
uiz_fixslideframepos(id)
uiz_fixchildren(id,false)
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_frame_event_scroll();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_frame_fixscrolling(true,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///auto updater of scrollbars
/***************************************************
  Auto updater
 ***************************************************/

if autoupdatescrollx then{
    updatescrollx=true;
}


if autoupdatescrolly then {
    updatescrolly=true;
}
c = uiz_frame_fixscrolling(false,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if posmode=uiz_horizontal then{
uiz_compatibility_mouse_docheck_frame_margin((1-posbool)*mw,0,posbool*mw,0);
}else{
uiz_compatibility_mouse_docheck_frame_margin(0,(1-posbool)*mw,0,posbool*mw);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_frame_event_draw();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if ds_exists(children,ds_type_list) then{ds_list_destroy(children)}
//if surface_exists(containframe) then{surface_free(containframe)}
uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if ds_exists(children,ds_type_list) then{ds_list_destroy(children)}
//if surface_exists(containframe) then{surface_free(containframe)}
uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
