<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 24
//#objectversion 1.0
uiz_objinit()
value=""//s//initial value//
textcolor=c_black//c//text color//
selectbackcolor=c_blue//c//selection background color//
selecttextcolor=c_white//c//selection text color//
margin=4//v//margin//
font=-1//f//font//
updated=0
typing=0
typepos=0
typeanimationin=uiz_exponential_in//a//type animation in//
typeanimationout=uiz_exponential_in//a//type animation out//
count=0
countspeed=1//v//type animation time//
maxlength=0//v//max length//
str="";
update=1
lastkeyboard_key=0
changesign=0
account=0
//accountspeed=0.08
accountspeed=1//v//rapid mode count time//
accbetween=0.000001//v//rapid mode speed//
qstr=value
begc=1
endc=1
selp1=0
selp2=0
selpmin=0
selpmax=0
hasmouse=0
hasselection=0
selectionstring=""
whatsign=""
messagetext="Enter a value"//s//message text on mobile//

hasbackground=true;
texturescript=uiz_back_circlestitch//i//texturescript//
texturescript_over=-1//i//texturescript over//
texturescript_in=-1//i//texturescript in//
texturescript_out=-1//i//texturescript out//

sprite_normal=spr_uiZ_border1//p//sprite normal//
color_normal=c_white//c//color normal//
margin_normal=5//v//margin normal//
sprite_texturemode=uiz_texturemode_fill//t//texturemode normal
border_texturemode=-1//t//texturemode border//

sprite_over=spr_uiZ_border1_over//p//sprite over//
color_over=-1//c//color over//
margin_over=-1//v//margin over//

sprite_in=spr_uiZ_border1_in//p//sprite in//
color_in=-1//c//color in//
margin_in=-1//v//margin in//

sprite_out=spr_uiZ_border1_in//p//sprite out//
color_out=-1//c//color out//
margin_out=-1//v//margin out//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check the typing
len = string_length(value) + 1
sw = string_width("|")
updated = 0
update = 0;
if hasmouse = 1 then {
    if uiz_getmouse_x() &gt; rlx then {
        uiz_stringbox_shiftright()
    }
    if uiz_getmouse_x() &lt; rx then {
        uiz_stringbox_shiftleft()
    }
    if mouse_check_button_released(mb_left) then {
        global.mousefrozen = 0
        hasmouse = 0
    }
    if mouse_check_button(mb_left) then {
        if uiz_getmouse_x() &gt; min(rx + margin + string_width(qstr), rlx - margin) then {
            selp2 = endc
        } else {
            for (var i = 0; i &lt;= len; i++) {
                if string_width(string_copy(value, begc, i - begc)) - string_width(string_char_at(value, i)) / 2 &gt; uiz_getmouse_x() - rx then {
                    selp2 = i - 2
                    break;
                }
            }
            //}
        }
    }
    selpmin = min(selp1, selp2)
    selpmax = max(selp1, selp2)
    //sdbm("selp",selpmin,selpmax)
    if selpmin!=selpmax then{
        //hasselection = 1;
    }
    uiz_stringbox_getselectionstring()
} else {
    if mouse_check_button_released(mb_left) then {
        hasselection = 0
    }
}

if typing = 1 then {
    if keyboard_check_released(vk_anykey) then {
        update = 1;
    }
    //keyboard shortcuts, like copy past...etc
    if keyboard_check(vk_control) then {
        //dbm(keyboard_key)
        if lastkeyboard_key &gt; 0 and keyboard_check_released(lastkeyboard_key) then {
            //dbm(lastkeyboard_key)
            //sdbm(lastkeyboard_key)
            switch (lastkeyboard_key) {
                case 50: //2/@
                    changesign = 1;
                    whatsign = "@";
                    break;
                case 55: //7/&amp;
                    changesign = 1;
                    whatsign = "&amp;";
                    break;
                case 188: //,/&lt;
                    changesign = 1;
                    whatsign = ",";
                    break;
                case 222: //'/"
                    changesign = 1;
                    whatsign = "'";
                    break;
                case 191: ////?
                    changesign = 1;
                    whatsign = "/";
                    break;
                case 65: //a
                    //dbm("hi!")
                    hasselection = 1
                    selp1 = 0
                    selp2 = len
                    selpmin = 0
                    selpmax = len
                    uiz_stringbox_getselectionstring()
                    break;
                case 86: //v, paste
                    //sdbm("hi paste!: ",clipboard_get_text())
                    if hasselection = 1 then {
                        uiz_stringbox_deletesel()
                    }
                    value = string_copy(value, 0, typepos - 1) + clipboard_get_text() + string_copy(value, typepos, len)
                    len = string_length(value) + 1
                    if typepos = endc then {
                        endc = len;
                        for (var i = endc; i &gt;= 0; i--) {
                            if sw + string_width(string_copy(value, i, endc - i)) &gt; width - margin * 2 then {
                                //sdbm(i,string_copy(value,i,endc-i),sw+string_width(string_copy(value,i,endc-i)))
                                begc = i + 1
                                break;
                            }
                        }
                    }
                    typepos += string_length(clipboard_get_text())
                    if typepos &gt; endc then {
                        endc = min(endc + 1, len);
                        //begc=min(begc+1,len)
                        //get new beg
                        for (var i = endc; i &gt;= 0; i--) {
                            if sw + string_width(string_copy(value, i, endc - i)) &gt; width - margin * 2 then {
                                begc = i + 1
                                break;
                            }
                        }
                    }
                    update = 1;
                    break;
                case 88: //x, cut
                    if hasselection = 1 then {
                        clipboard_set_text(selectionstring)
                        uiz_stringbox_deletesel()
                    } else {
                        clipboard_set_text(value)
                        value = ""
                    }
                    break;
                case 67: //c, copy
                    //sdbm("HI!")
                    if hasselection = 1 then {
                        clipboard_set_text(selectionstring)
                    } else {
                        clipboard_set_text(value)
                    }
                    break;
            }
        }
    } else {

        if keyboard_check(keyboard_key) and!(keyboard_key = 0) then {
            account = min(account + (1 / (accountspeed * room_speed)), 1)
        } else {
            account = 0
        }
        if lastkeyboard_key != keyboard_key then {
            account = 0
        }
        if (keyboard_check_pressed(keyboard_key) or account = 1) and!(keyboard_key = 0) then {
            account = max(account - ((accbetween * room_speed)), 0)
            if hasselection = 1 then {
                switch (keyboard_key) {
                    case vk_lshift:
                    case vk_rshift:
                    case vk_shift:
                        break;
                    case vk_left:
                        if keyboard_check(vk_shift) then {
                            if hasmouse = 0 then {
                                selp2 = clamp(selp2 - 1, -1, len)
                                selpmin = min(selp1, selp2)
                                selpmax = max(selp1, selp2)
                            }
                        } else {
                            hasselection = 0
                            //uiz_stringbox_subtypepos()
                            typepos = selpmin + 1
                        }
                        break;
                    case vk_right:
                        if keyboard_check(vk_shift) then {
                            if hasmouse = 0 then {
                                selp2 = clamp(selp2 + 1, -1, len)
                                selpmin = min(selp1, selp2)
                                selpmax = max(selp1, selp2)
                            }
                        } else {
                            hasselection = 0
                            typepos = selpmax + 1
                        }
                        //uiz_stringbox_addtypepos()
                        break;
                    case vk_backspace:
                    case vk_delete:
                        uiz_stringbox_deletesel()
                        break;
                    case vk_home:
                        hasselection = 0
                        typepos = 0
                        break;
                    case vk_end:
                        hasselection = 0
                        typepos = len
                        break;
                    case 222: // ' sign
                        uiz_stringbox_deletesel()
                        if changesign = 1 then {
                            changesign = 0
                            uiz_stringbox_addchar()
                            uiz_stringbox_addchar()
                        } else {
                            changesign = 1
                        }
                        if keyboard_check(vk_shift) then {
                            whatsign = '"'
                        } else {
                            whatsign = "'"
                        }
                        break;
                    default:
                        if keyboard_check(vk_alt) = 0 and keyboard_check(vk_shift) = 0 and keyboard_check(vk_control) = 0 and keyboard_check(vk_tab) = 0 then {
                            uiz_stringbox_deletesel()
                        }
                        changesign = 0
                        //if (keyboard_key&gt;=65 and keyboard_key&lt;=90) or (keyboard_key)then{
                        if keyboard_check(vk_control) or keyboard_check(vk_alt) or(keyboard_key &gt;= 112 and keyboard_key &lt;= 123) then {} else {
                            if changesign = 1 then {
                                uiz_stringbox_addchar_c("'")
                            }
                            uiz_stringbox_addchar()
                        }
                        //}
                        break;

                }
            } else { //!hasselection
                switch (keyboard_key) {

                    case vk_left:
                        if keyboard_check(vk_shift) then {
                            //if hasselection=0 then{
                            if typepos &gt; -1 then {
                                hasselection = 1
                                selp1 = typepos - 1
                                selp2 = typepos - 2
                                selpmin = typepos - 2
                                selpmax = typepos - 1
                            }

                        } else {
                            hasselection = 0
                        }
                        uiz_stringbox_subtypepos()
                        break;
                    case vk_right:
                        if keyboard_check(vk_shift) then {
                            //if hasselection=0 then{
                            if typepos &lt; len then {
                                hasselection = 1
                                selp1 = typepos - 1
                                selp2 = typepos
                                selpmin = typepos - 1
                                selpmax = typepos
                            }

                        } else {
                            hasselection = 0
                        }
                        uiz_stringbox_addtypepos()
                        break;


                        //break;
                    case vk_backspace:
                        value = string_copy(value, 0, typepos - 2) + string_copy(value, typepos, len);
                        if endc &gt;= len then {
                            endc = max(0, endc - 1)
                            //begc=0
                            begc = 1
                            for (var i = endc; i &gt;= 0; i--) {
                                if sw + string_width(string_copy(value, i, endc - i)) &gt; width - margin * 2 then {
                                    //sdbm(i,string_copy(value,i,endc-i),sw+string_width(string_copy(value,i,endc-i)))
                                    begc = i + 1
                                    break;
                                }
                            }

                        }
                        /*if typepos&lt;=begc then{if string_width(string_copy(value,0,endc))&gt;width-margin*2 then{endc=begc; begc=0}else{

                        //home
                        typepos=0;
                        begc=0;
                        for (var i=0;i&lt;len;i++){
                        if sw+string_width(string_copy(value,begc,i))&gt;width-margin*2 then{
                        endc=i-1
                        break;
                        }}
                        }}//*/

                        uiz_stringbox_subtypepos();
                        break;
                    case vk_delete:
                        value = string_copy(value, 0, typepos - 1) + string_copy(value, typepos + 1, len);
                        if endc &gt;= len then {
                            endc = max(0, endc - 1)
                            //begc=0
                            begc = 1
                            for (var i = endc; i &gt;= 0; i--) {
                                if sw + string_width(string_copy(value, i, endc - i)) &gt; width - margin * 2 then{
                                    //sdbm(i,string_copy(value,i,endc-i),sw+string_width(string_copy(value,i,endc-i)))
                                    begc = i + 1
                                    break;
                                }
                            }

                        }
                        //if len&lt;=1 then{value=""}
                        typepos = min(typepos, endc)
                        break;
                    case vk_enter:
                        typing = 0;
                        update = 1;
                        updated = 1;
                        break; //case vk_space: update=1;break;

                    case 222:
                        if changesign = 1 then {
                            changesign = 0
                            uiz_stringbox_addchar()
                            uiz_stringbox_addchar()
                        } else {
                            changesign = 1
                        }
                        if keyboard_check(vk_shift) then {
                            whatsign = '"'
                        } else {
                            whatsign = "'"
                        }
                        break;
                    case vk_tab:
                        break; //tab
                    case vk_shift:
                        break; //shift
                    case 27:
                        break; //esc
                    case 144:
                        break; //numlock
                    case 45:
                        break; //insert
                    case 19:
                        break; //page break
                    case 35:
                        uiz_stringbox_endtypepos()
                        break; //end
                    case 36:
                        typepos = 1;
                        //begc=0;
                        begc = 1;
                        for (var i = 0; i &lt; len; i++) {
                            if sw + string_width(string_copy(value, begc, i)) &gt; width - margin * 2 then {
                                endc = i - 1
                                break;
                            }
                        }

                        break; //home
                    case 33:
                        break; //pg up
                    case 34:
                        break; //pg down
                    case 160:
                    case 161:
                        break;
                    default:

                        //if (keyboard_key&gt;=65 and keyboard_key&lt;=90) or (keyboard_key)then{
                        if keyboard_check(vk_control) or keyboard_check(vk_alt) or(keyboard_key &gt;= 112 and keyboard_key &lt;= 123) or keyboard_key = 174 or keyboard_key = 175 then {} else {
                            if changesign = 1 then {
                                //sdbm(uiz_returncharaddon(string_char_at(keyboard_string,string_length(keyboard_string)),whatsign))
                                uiz_stringbox_addchar_c(uiz_returncharaddon(string_char_at(keyboard_string, string_length(keyboard_string)), whatsign))
                            } else {
                                uiz_stringbox_addchar()
                            }
                        }
                        whatsign = ""
                        changesign = 0
                        //}
                        break;
                }

            }
        }
    }
    //check scrolling
    if sw + string_width(value) &lt;= width - margin * 2 then {
        qstr = value;
        becg = 0;
        endc = len
    } else {

        qstr = string_copy(value, begc, endc - begc)
    }
} else {
    if qstr = ""
    then {
        qstr = value
    }
    if string_width(qstr) &gt; width - margin * 2 then {
        //begc=0
        begc = 1
        for (var i = 0; i &lt; len; i++) {
            if string_width(string_copy(value, begc, i)) &gt; width - margin * 2 then {
                endc = i - 1
                break;
            }
        }
        qstr = string_copy(value, begc, endc - begc)
    }
}


lastkeyboard_key = keyboard_key
uiz_updater_FixViews();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if kmouseover&gt;0 then{uiz_set_cursor(cr_beam)

if global.systemsupportskeyboard = true then {
    switch (kmouseover) {

        case 3:
            typing = 1
            hasmouse = 1
            hasselection = 0
            global.mousefrozen = 1
            uiz_updater_step();
            //check the posistion of typepos
            if uiz_getmouse_x() &lt; rx + margin + string_width(string_copy(qstr, 1, 1)) / 2 then {
                typepos = begc - 1
            } else {
                if uiz_getmouse_x() &gt; min(rx + margin + string_width(qstr), rlx - margin) then {
                    typepos = endc
                } else {
                    //if uiz_getmouse_x()&gt;rx+margin+string_width(value) then{typepos=len}else{
                    //check position of mouse
                    for (var i = begc-1; i &lt; endc; i++) {
                        if string_width(string_copy(value, begc, i - begc - 1)) + string_width(string_char_at(value, i - 1)) / 2 &gt; uiz_getmouse_x() - rx - margin then {
                        sdbm(string_copy(value, begc, i - begc -1),string_char_at(value, i - 1),
                        string_width(string_copy(value, begc, i - begc - 1)) + string_width(string_char_at(value, i - 1)) / 2,uiz_getmouse_x() - rx - margin)
                            typepos = i;
                            break;
                        }
                    }
                }
            }

            selp1 = typepos
            selp2 = typepos
            selpmin = typepos
            selpmax = typepos
            uiz_stringbox_getselectionstring()
            break;
        case 4:
            if (hasselection = 1 or hasmouse = 1) and(selpmax - selpmin) &lt;= 2 then {
                hasmouse = 0
                hasselection = 0
            }
            if hasmouse = 1 then {
                global.mousefrozen = 0
            }

            //check the posistion of typepos
            if uiz_getmouse_x() &lt; rx + margin then {
                typepos = begc
            } else {
                if uiz_getmouse_x() &gt; min(rx + margin + string_width(qstr), rlx - margin) then {
                    typepos = endc
                } else {
                    //if uiz_getmouse_x()&gt;rx+margin+string_width(value) then{typepos=len}else{
                    //check position of mouse
                    for (var i = begc; i &lt;= endc; i++) {
                        if string_width(string_copy(value, begc, i - begc)) - string_width(string_char_at(value, i)) / 2 &gt; uiz_getmouse_x() - rx then {
                            typepos = i - 1
                            break;
                        }
                    }
                }
            }

            typing = 1
            uiz_updater_step();
            break;
        case 0:
            if mouse_check_button(mb_left) and typing = 1 then {
                typing = 0 update = 1 updated = 1
                uiz_updater_unstep();
            }
            break;
    }
} else {
    if kmouseover = 3 then {
        qstr = ""
        value = get_string(messagetext, value)
        if maxlength &gt; 0 then {
            value = string_copy(value, 1, maxlength)
        }
    }
}

}else{
uiz_set_cursor(cr_default);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_mouse_docheck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//update=0;
//updated=0
if uiz_cntn() then {
    if font &gt; -1 then {
        draw_set_font(font)
    }
    //draw back
    if typing = 1 then {
        n = 3
    } else {
        if kmouseover = 0 then {
            var n = 0
        } else {
            n = 1
        }
    }
    uiz_back(n)


    //draw buttons
    if typing = 1 then {
        //if hasmouse=1 then{
        if hasselection = 1 then {
            //hasmouse
            draw_set_color(textcolor)
            draw_set_valign(fa_middle)
            draw_set_halign(fa_left)
            var pselp1 = max(selpmin - begc, -1);
            var pselp2 = max(selpmax - begc, -1);
            var a;
            //if selp2-begc&lt;=-1 then{a=1}else{a=0}
            if pselp1 &lt;= -1 then {
                a = 1
            } else {
                a = 0
            }
            //if selp2&lt;=selp1 then{a++}
            var addw = 0
            if pselp1 &gt;= 0 then {
                var begsel = string_copy(qstr, 1, pselp1 + 1);
                draw_text(rx + margin, ry + height / 2, begsel)
                addw = string_width(begsel)
            }
            if pselp1 &gt;= 0 and begsel = qstr then {
                midsel = ""
            } else {
                var midsel = string_copy(qstr, pselp1 + 2, pselp2 - pselp1);
            }
            var f = rx + addw;
            addw += string_width(midsel);
            draw_square(f + margin, ry + margin_normal, rx + addw + margin, rly - margin_normal, selectbackcolor, alpha)
            draw_set_color(selecttextcolor)
            draw_text(f + margin, ry + height / 2, midsel)
            draw_set_color(textcolor)

            var lastsel = string_copy(qstr, pselp2 + 2, string_length(qstr) - pselp2)
            draw_text(rx + addw + margin, ry + height / 2, lastsel)
        } else {
            draw_set_valign(fa_middle)
            draw_set_halign(fa_left)
            //var qstr=uiz_gettext_contained(value,width-butmargin)
            //qstr=value
            var ptypepos = typepos - begc;
            laststr = string_copy(qstr, ptypepos + 1, string_length(qstr) - ptypepos)
            laststrsz = string_width(laststr)
            firststr = string_copy(qstr, 0, ptypepos)
            draw_set_alpha(1)
            draw_set_color(textcolor)

            draw_text(rx + margin, ry + height / 2, firststr)
            draw_text(rx + string_width(firststr) + margin, ry + height / 2, laststr)
            count += 1 / (countspeed * room_speed);
            if count &gt;= 1 then {
                count = 0
            }
            if count &lt; 0.5 then {
                var anim = uiz_animation_getfunction(count * 2, typeanimationin)
            } else {
                var anim = 1 - uiz_animation_getfunction((count - 0.5) * 2, typeanimationout)
            }
            draw_set_alpha(anim * alpha)
            draw_text(rx + string_width(firststr), ry + height / 2 - 1, "|")
            draw_set_alpha(1)
            draw_set_valign(fa_top)
            draw_set_halign(fa_left)
        }
    }
    else { //draw_text(brx-butmargin,ry+height/2,uiz_gettext_contained(string_format(value,8,4),brx-butmargin*2-rx))}
        draw_set_color(textcolor)
        draw_set_valign(fa_middle)
        draw_set_halign(fa_left)

        //draw_text(rx,ry+height/2,uiz_gettext_contained(value,width-2*margin))
        draw_text(rx + margin, ry + height / 2, qstr)
    }
    draw_set_valign(fa_top)
    draw_set_halign(fa_left)
    uiz_containend()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
