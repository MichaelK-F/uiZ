<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 18
//#objectversion 1.0
uiz_objinit()
value=0//v//starting value//
//plusmin=1
//type=1
plusbuttoncolor=c_green//c//plus button color//
plusbuttononcolor=c_olive//c//plus button mouse over color//
plusbuttonincolor=c_lime//c//plus button mouse click color//
minbuttoncolor=c_red//c//min button color//
minbuttononcolor=c_orange//c//min button mouse over color//
minbuttonincolor=c_yellow//c//min button mouse click color//
iconcolor=c_white//c//plus button color//
//drawicon=0
textcolor=c_black//c//text color//
//alpha=1
butmargin=2//v//buttons margins//
butrightmargin=0//v//buttons right side margins//
font=-1//f//font//
butdcount=0
butucount=0
butsteps=0.5//v//button rapid time//
valuespeed=1//v//value speed//
valuefastspeed=180//v//value fast speed//
updated=0
typing=0
typepos=0
typeanimationin=uiz_exponential_in//a//type animation in//
typeanimationout=uiz_exponential_in//a//type animation out//
count=0
countspeed=1//v//type animation time//
allowdec=1
//lastkeyboard_key=keyboard_key
maxvalue=10000//v//maximum value//
minvalue=-10000//v//minimum value//
str="";
update=1
lastkeyboard_key=vk_nokey
lastvalue=value
messagetext="Enter a value:"//s//mobile message text//

hasbackground=true;
texturescript=uiz_back_circlestitch//i//texturescript//
texturescript_over=-1//i//texturescript over//
texturescript_in=-1//i//texturescript in//
texturescript_out=-1//i//texturescript out//

sprite_normal=spr_uiZ_border1//p//sprite normal//
color_normal=c_white//c//color normal//
margin_normal=5//v//margin normal//
sprite_texturemode=uiz_texturemode_fill//t//texturemode normal
border_texturemode=-1//t//texturemode border//

sprite_over=spr_uiZ_border1_over//p//sprite over//
color_over=-1//c//color over//
margin_over=-1//v//margin over//

sprite_in=spr_uiZ_border1_in//p//sprite in//
color_in=-1//c//color in//
margin_in=-1//v//margin in//

sprite_out=spr_uiZ_border1_in//p//sprite out//
color_out=-1//c//color out//
margin_out=-1//v//margin out//


butup_plus=0;
butup_minus=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check the typing
/*
ustr=string_format(value,8,uiz_realgetdecimalpoints(value,6))
ustr=string_replace_all(ustr," ","")
if addpoint=1 then{ustr=ustr+pointstring}
var len=string_length(ustr);
if typepos&gt;len then{typepos=len}
//ustr=uiz_gettext_contained(ustr,width-buttonsz-butmargin)

if uiz_mouse_isonobject_releasedleft(id) then{
typing=1
typepos=string_length(ustr)
}else{
if mouse_check_button(mb_left) then{typing=0}
}
if typing=1 then{
if keyboard_check_released(vk_left){typepos=max(0,typepos-1) addpoint=0}
if keyboard_check_released(vk_right){typepos=min(string_length(ustr),typepos+1) addpoint=0}
if keyboard_check_released(vk_backspace){
value=real(string_copy(ustr,0,typepos-1)+string_copy(ustr,typepos+1,len));
typepos--;
updated=1}
if keyboard_check_released(vk_delete){

value=real(string_copy(ustr,0,typepos)+string_copy(ustr,typepos+2,len))
updated=1
}
//minus key
if keyboard_check_released(189) or keyboard_check_released(109) or keyboard_check_released(187) or keyboard_check_released(107) then{value*=-1; if value&lt;0 then{typepos++;}updated=1}
//point key
//if keyboard_check_released(vk_space) then{
//var ps=uiz_realgetdecimalpoints(value,6);
//value*=power(10,uiz_realgetdecimalpoints(value,6))
//if len-ps&lt;=typepos then{typepos--;}
//}
if keyboard_check_released(110) or keyboard_check_released(190) or keyboard_check_released(188) then{
if typepos=len then{addpoint=1; pointstring="."; typepos++;}else{
var ps=uiz_realgetdecimalpoints(value,6);
value*=power(10,uiz_realgetdecimalpoints(value,6))
if len-ps&lt;=typepos then{typepos--;}
var len=string_length(string(value));
value/=power(10,len-typepos);
typepos++;}

}


//copy
if keyboard_check(vk_control) and keyboard_check(ord("C")) then{clipboard_set_text(ustr) updated=1}
//paste
if keyboard_check(vk_control) and keyboard_check(ord("V")) then{var ctxt=clipboard_get_text();var csd=string_digits(ctxt) if csd=ctxt and ctxt!="" then{value=real(csd)}}
//cut
if keyboard_check(vk_control) and keyboard_check(ord("X")) then{clipboard_set_text(ustr) value=0; updated=1}
//number keys
var key=uiz_keytonumber(lastkeyboard_key)

if keyboard_check_released(vk_anykey) and key!=-1 then{
if addpoint=1 and key=0 then{pointstring=pointstring+"0" typepos++;}else{
if addpoint=1 then{addpoint=0;pointstring=""}
if value=0 then{value=key;typepos=1;}else{
value=min(maxvalue,max(minvalue,real(string_copy(string_copy(ustr,0,typepos)+string(key)+string_copy(ustr,typepos+1,len),0,19))));
//typepos=min(typepos+1,max(string_length(string(maxvalue)),string_length(string(minvalue))));
typepos++
updated=1
}
}
}
}
lastkeyboard_key=keyboard_key
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check the typing
//ustr=string_format(value,8,uiz_realgetdecimalpoints(value,6))
//ustr=string_replace_all(ustr," ","")
//str=str
//updated=0

if update=1 or value!=lastvalue then{//update=0;
 lastvalue=value;
if allowdec=1 then{
str=string_format(value,8,uiz_realgetdecimalpoints(value,6))}else{
str=string_format(value,8,0)
}
str=string_replace_all(str," ","")
}
/*
if uiz_mouse_isonobject_releasedleft(id) then{
if global.systemsupportskeyboard=true then{
typing=1
typepos=string_length(str)
}else{
value=clamp(get_integer(messagetext,value),minvalue,maxvalue)
if allowdec=false then{value=round(value)}
}
}else{
if mouse_check_button(mb_left) and typing=1 then{typing=0; update=1}
}

*/
len=string_length(str);
typepos=clamp(typepos,0,len)
//if typepos&gt;len then{typepos=len}

if typing=1 then{
uiz_updater_FixViews();
if keyboard_check_released(lastkeyboard_key) then{
switch(lastkeyboard_key){
case vk_left:typepos=max(0,typepos-1);break;
case vk_right:typepos=min(string_length(str),typepos+1);break;
case vk_backspace: str=string_copy(str,0,typepos-1)+string_copy(str,typepos+1,len); typepos--;break;
case vk_delete: str=string_copy(str,0,typepos)+string_copy(str,typepos+2,len);break;
case vk_enter: typing=0; case vk_space: update=1;break;
//minus
case 189: case 109: case 187: case 107: if string_copy(str,0,1)="-" then{str=string_copy(str,2,len) typepos=max(0,typepos-1)}else{str="-"+str; typepos++} break;
//point
case 110: case 190: case 188: 
if allowdec=1 then{
var pos=uiz_stringfind(str,".");
//show_debug_message(pos)
if pos&gt;0 then{str=uiz_removechar(str,pos) if pos&lt;=typepos then{typepos--;}}
str=uiz_addchar(str,typepos,".")
typepos++;
}
break;
default:
var key=uiz_keytonumber(lastkeyboard_key)
if keyboard_check_released(vk_anykey) and key!=-1 then{
str=string_copy(str,0,typepos)+string(key)+string_copy(str,typepos+1,len)
typepos++;
}
break;
}
}

}

if update=1 then{value=clamp(real(str),minvalue,maxvalue) updated=1; uiz_updater_FixViews()}

lastkeyboard_key=keyboard_key
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
//if keyboard_check_released(vk_space) uiz_updater_FixViews();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//handle buttons
var buttonsz=min(max(10,height/2-butmargin*2),width/2)
var mrx=slx-buttonsz-butrightmargin-margin_normal//+butmargin
var mrlx=slx-butmargin-butrightmargin-margin_normal

//plus button
var obutup_plus=butup_plus;
butup_plus=uiz_draw_squarebutton_differentmouse_step(mrx,sy+butmargin,mrlx,sy+(height-butmargin)/2)
if butup_plus=3 then{value=min(maxvalue,max(minvalue,value+valuespeed)) update=1 updated=1 typing=0}
if butup_plus=2 then{butucount++ if butucount&gt;butsteps*room_speed then{value=min(maxvalue,max(minvalue,value+ceil(valuefastspeed/room_speed))) update=1}}else{butucount=0}

//minus button
var obutup_minus=butup_minus;
butup_minus=uiz_draw_squarebutton_differentmouse_step(mrx,sy+(height+butmargin)/2,mrlx,sly-butmargin)
if butup_minus=3 then{value-=valuespeed;value=min(maxvalue,max(minvalue,value)) update=1 updated=1 typing=0}
if butup_minus=2 then{butdcount++ if butdcount&gt;butsteps*room_speed then{value=min(maxvalue,max(minvalue,value-ceil(valuefastspeed/room_speed))) update=1}}else{butdcount=0}
//sdbm("current butup",butup_plus,butup_minus)
if obutup_plus!=butup_plus or obutup_minus!=butup_minus then{
uiz_updater_FixViews();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kmouseover=uiz_mouse_isonobject_leftcheck(id)
if kmouseover&gt;0 then{uiz_set_cursor(cr_beam)}


if uiz_mouse_isonobject_releasedleft(id) then{
if global.systemsupportskeyboard=true then{
typing=1
typepos=string_length(str)
}else{
value=clamp(get_integer(messagetext,value),minvalue,maxvalue)
if allowdec=false then{value=round(value)}
}
}else{
if mouse_check_button(mb_left) and typing=1 then{typing=0; update=1}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_mouse_docheck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
updated=0
update=0;
if uiz_cntn() then{
//draw back
//draw_square(rx,ry,rlx,rly,backcolor,alpha)
if typing=1 then{n=3}else{if kmouseover=0 then{var n=0}else{n=1}}
//sdbm("n",n)
uiz_back(n)
//draw buttons
buttonsz=min(max(10,height/2-butmargin*2),width/2)
brx=rlx-buttonsz-butrightmargin-margin_normal//+butmargin
brlx=rlx-butmargin-butrightmargin-margin_normal
mrx=slx-buttonsz-butrightmargin-margin_normal//+butmargin
mrlx=slx-butmargin-butrightmargin-margin_normal
//butup=0
//butup=uiz_draw_squarebutton(mrx,sy+butmargin,mrlx,sy+(height-butmargin)/2,plusbuttoncolor,plusbuttononcolor,plusbuttonincolor,alpha)
//butup=
uiz_draw_squarebutton_differentmouse_draw(brx,ry+butmargin,brlx,ry+(height-butmargin)/2,plusbuttoncolor,plusbuttononcolor,plusbuttonincolor,alpha,mrx,sy+butmargin,mrlx,sy+(height-butmargin)/2)
/*if butup=2 then{value=min(maxvalue,max(minvalue,value+valuespeed)) update=1 updated=1 typing=0}
if butup=1 then{butucount++ if butucount&gt;butsteps*room_speed then{value=min(maxvalue,max(minvalue,value+ceil(valuefastspeed/room_speed))) update=1}}else{butucount=0}
*/
draw_line_width_colour(brx+buttonsz/10-1,ry+butmargin+((height-butmargin)/2-butmargin)/2-1,brlx-buttonsz/10-1,ry+butmargin+((height-butmargin)/2-butmargin)/2-1,buttonsz/10,iconcolor,iconcolor)
draw_line_width_colour(brx+(brlx-brx)/2-1,ry+butmargin+buttonsz/10-1,brx+(brlx-brx)/2-1,ry+(height-butmargin)/2-buttonsz/10-1,buttonsz/10,iconcolor,iconcolor)
//butup=0

//butup=uiz_draw_squarebutton(mrx,sy+(height+butmargin)/2,mrlx,sly-butmargin,minbuttoncolor,minbuttononcolor,minbuttonincolor,alpha)
//butup=
uiz_draw_squarebutton_differentmouse_draw(brx,ry+(height+butmargin)/2,brlx,rly-butmargin,minbuttoncolor,minbuttononcolor,minbuttonincolor,alpha,mrx,sy+(height+butmargin)/2,mrlx,sly-butmargin)
/*if butup=2 then{value-=valuespeed;value=min(maxvalue,max(minvalue,value)) update=1 updated=1 typing=0}
if butup=1 then{butdcount++ if butdcount&gt;butsteps*room_speed then{value=min(maxvalue,max(minvalue,value-ceil(valuefastspeed/room_speed))) update=1}}else{butdcount=0}
*/
draw_line_width_colour(brx+buttonsz/10-1,ry+(height+butmargin)/2+((rly-butmargin)-(ry+(height+butmargin)/2))/2-1,brlx-buttonsz/10-1,ry+(height+butmargin)/2+((rly-butmargin)-(ry+(height+butmargin)/2))/2-1,buttonsz/10,iconcolor,iconcolor)
draw_set_valign(fa_middle)
draw_set_halign(fa_right)
if font!=-1 then{
draw_set_font(font)
}

if typing=1 then{
typewidth=string_width("|")
//ustr=string_format(value,8,4)
//ustr=string_replace_all(ustr," ","")
var qstr=uiz_gettext_contained(str,width-buttonsz-butmargin-butrightmargin-margin_normal*2)
laststr=string_copy(qstr,typepos+1,string_length(qstr)-typepos)
laststrsz=string_width(laststr)
firststr=string_copy(qstr,0,typepos)
if typepos&gt;string_length(qstr)/2 then{
//cut off the first half
//firststr=uiz_gettext_contained(firststr,width-buttonsz-butmargin-typewidth-laststrsz-typewidth)
}else{
//cut off the last half
//laststr=uiz_gettext_contained(laststr,width-buttonsz-butmargin-typewidth-laststrsz-typewidth-string_width(firststr))
}


//lastpartwidth=string_width()
//draw_text(brx-butmargin-typewidth,ry+height/2,uiz_gettext_contained(string_format(value,8,4),brx-butmargin*2-rx-typewidth))
draw_set_alpha(1)
draw_set_color(textcolor)
draw_text(brx-butmargin-typewidth,ry+height/2,laststr)
draw_text(brx-butmargin-typewidth-laststrsz-typewidth,ry+height/2,firststr)
count+=1/(countspeed*room_speed);
if count&gt;=1 then{count=0}
if count&lt;0.5 then{
var anim=uiz_animation_getfunction(count*2,typeanimationin)
}else{
var anim=1-uiz_animation_getfunction((count-0.5)*2,typeanimationout)}
draw_set_alpha(anim)
draw_text(brx-butmargin-laststrsz-4,ry+height/2-1,"|")
draw_set_alpha(1)
}
else{//draw_text(brx-butmargin,ry+height/2,uiz_gettext_contained(string_format(value,8,4),brx-butmargin*2-rx))}
draw_set_color(textcolor)
draw_text(brx-butmargin,ry+height/2,str)}
draw_set_valign(fa_top)
draw_set_halign(fa_left)
//if update=1 then{draw_square(rx,ry,rx+50,ry+50,c_red,1)}
uiz_containend()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
