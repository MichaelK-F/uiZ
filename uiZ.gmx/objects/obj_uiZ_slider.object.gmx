<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///#define uiZ
//#sprite images
//#spritenum 22
//#objectversion 1.0
uiz_objinit()
color1=c_green//c//left color//
color2=c_red//c//right color//
coloranicountspeed=.4//v//color animation speed//
coloranimation=1//b//enable color animation//
coloranimationtype=uiz_quadratic_out//a//color animation//
outline=1//b//outline//
outlinewidth=2//v//outline width//
coloroutline1=c_aqua//c//left outline color//
coloroutline2=c_orange//c//right outline color//
roundedcorners=false;//b//enable rounded corners//
rounddistance_x=0.07//v//round corner width//
rounddistancetype_x=dp//z//round corner width type//
rounddistance_y=0.07//v//round corner height//
rounddistancetype_y=dp//z//round corner height type//
slidersize=0.1//v//slider knob width//
slidersizetype=fc//z//slider knob Wtype//
sliderheight=1//v//slider knob height//
sliderheighttype=fc//v//slider knob heighttype//
slidercolor=c_green//c//knob color//
slidercoloron=c_olive//c//knob mouse over color//
slidercolorin=c_lime//c//knob mouse pressing color//
slideralpha=1//v//knob alpha//
value=0
invalue=0
fromvalue=0
selected=0
anicount=0;
ucolor=slidercolor;
anicountspeed=.4//v//knob animation speed//
animation=1//b//enable animation//
animationtype=uiz_quadratic_out//a//knob animation//
snappoint=0;
update=0;
updated=0;
rounddx=0;
rounddy=0;
color1to=color1;
color2to=color2; 
color1from=color1;
color2from=color2; 
animateColors=1;

MouseOffset=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (live_call()) return live_result;
updated = 0;
if selected = true then{
    updated = 1;
    fromvalue = invalue;
    //anicount = 0;
    value = clamp((uiz_getmouse_x() - sx - snappoint) / (width - slidersz), 0, 1);
    if obj_uiZ_controller.lastmousex &lt; sx then {
        value = 0
    }
    if obj_uiZ_controller.lastmousex &gt; slx then {
        value = 1
    }
    ucolor = slidercolorin;
    if !mouse_check_button(mb_left) then {
        uiz_slider_unselect(id)
    }
    
    
}

if !(fromvalue = value) and animation = 1 then {
    invalue = fromvalue + (uiz_animation_getFunction(anicount, animationtype) * (value - fromvalue))
    anicount += uiz_sc(anicountspeed)
    update = 1;
    if anicount &gt;= 1 then {
        invalue = value;
        fromvalue = value;
        anicount = 0;
        //check if should slide:
        //var pf = (width - slidersz) * invalue
        //var pl = pf + slidersz
        //if mouse_check_button(mb_left) and kmouseover &gt; 0 and point_in_rectangle(uiz_getmouse_x(), uiz_getmouse_y(), pf + sx, sy + height / 2 - sliderh / 2, pl + sx, sy + height / 2 + sliderh / 2 + 1) then {
        //    uiz_slider_select(id)
        //}
    }

} else {
    update = 0;
    fromvalue = value
    invalue = value
    anicount = 0
//    if selected=false then{
//    uiz_updater_unstep();}
}

if animateColors&lt;1 then{
    animateColors += uiz_sc(coloranicountspeed);
    var f = uiz_animation_getFunction(animateColors, coloranimationtype);
    color1 = merge_colour(color1from,color1to,f);
    color2 = merge_colour(color2from,color2to,f);
    uiz_updater_FixViews();
}

if (animateColors&gt;=1 and selected==false and anicount==0){
    uiz_updater_unstep();
}

if update or updated then{
uiz_updater_FixViews()}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ucolor_old=ucolor;
var pf=round((width-slidersz)*invalue);
var pl=pf+round(slidersz)
if kmouseover=1 and point_in_rectangle(uiz_getmouse_x(),uiz_getmouse_y(),pf+sx,sy+height/2-sliderh/2,pl+sx,sy+height/2+sliderh/2+1) then{
ucolor=slidercoloron
}else{
ucolor=slidercolor
}
if ucolor!=ucolor_old then{

uiz_updater_FixViews_area_selfmarked(pf+rx,ry+height/2-sliderh/2,pl+rx,ry+height/2+sliderh/2+1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>updated=0;
var pf=round((width-slidersz)*invalue);
var pl=pf+round(slidersz)
var ucolor_old=ucolor;
if kmouseover&gt;0 then{
uiz_set_cursor(cr_handpoint)
if point_in_rectangle(uiz_getmouse_x(),uiz_getmouse_y(),pf+sx,sy+height/2-sliderh/2,pl+sx,sy+height/2+sliderh/2+1) then{
ucolor=slidercoloron
uiz_updater_FixViews_area_selfmarked(pf+rx,ry+height/2-sliderh/2,pl+rx,ry+height/2+sliderh/2+1);
}

if kmouseover&gt;1 then{
ucolor=slidercolorin

if selected=false then{
snappoint=slidersz/2;
updated=1;
update=1;
uiz_updater_step()
uiz_slider_select(id)}
}
}else{
ucolor=slidercolor;
uiz_updater_FixViews_area_selfmarked(pf+rx,ry+height/2-sliderh/2,pl+rx,ry+height/2+sliderh/2+1);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_mouse_docheck()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if uiz_cntn() then{
if uiz_selfmarked=false then{
    if (roundedcorners){
        draw_square_rounded_colour(rx,ry,rlx,rly,color1,color2,color2,color1,alpha,rounddx,rounddy,true);
    }else{
        uiz_drawsquare_colour(rx,ry,rlx,rly,color1,color2,color2,color1,alpha) 
    }
    if outline=1 then{
        if (roundedcorners){
            draw_square_rounded_colour_outlined(rx,ry,rlx,rly,coloroutline1,coloroutline2,coloroutline2,coloroutline1,alpha,rounddx,rounddy,outlinewidth)
        }else{
            uiz_drawrectangleedgecolor(rx,ry,rlx,rly,coloroutline1,coloroutline2,coloroutline2,coloroutline1,alpha,outlinewidth)
        }
    }
}
var pf=round((width-slidersz)*invalue);
var pl=pf+round(slidersz)
draw_square(pf+rx,ry+height/2-sliderh/2,pl+rx+1,ry+height/2+sliderh/2,ucolor,slideralpha*alpha)
uiz_containend()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>uiz_endobject()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
